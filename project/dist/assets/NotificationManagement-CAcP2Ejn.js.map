{"version":3,"file":"NotificationManagement-CAcP2Ejn.js","sources":["../../src/components/labmanager/NotificationManagement.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  CircularProgress,\r\n  Alert,\r\n  Snackbar,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  TablePagination,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n} from '@mui/material';\r\nimport { supabase } from '@/lib/supabase';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport WarningIcon from '@mui/icons-material/Warning';\r\nimport { useNotification } from '@/hooks/useNotification';\r\nimport { useConfirmDialog } from '@/hooks/useConfirmDialog';\r\nimport { Notification } from '@/types';\r\nimport { LocalNotification } from '@/types';\r\nimport { useAuth } from '@/hooks/useAuth';\r\n\r\nexport default function NotificationManagement() {\r\n  const [newNotification, setNewNotification] = useState<Partial<LocalNotification> | null>(null);\r\n  const [notifications, setNotifications] = useState<\r\n  (LocalNotification & { users: { email: string; role: string } })[]\r\n>([]);\r\n  const { user } = useAuth();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { showNotification, NotificationComponent } = useNotification();\r\n  const { confirm, ConfirmDialogComponent } = useConfirmDialog();\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [DialogOpen, setDialogOpen] = useState(false);\r\n  const [notificationToDelete, setNotificationToDelete] = useState<string | null>(null);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [filterText, setFilterText] = useState('');\r\n  const [filterType, setFilterType] = useState<string>('');\r\n  const [filterRole, setFilterRole] = useState<string>('');\r\n  const [sortBy, setSortBy] = useState<'created_at' | 'type'>('created_at');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\r\n  const [targetUser, setTargetUser] = useState<string>('all'); // 'all' for all users, or a specific user ID\r\n  const [users, setUsers] = useState<{\r\n    role: string; id: string; email: string \r\n}[]>([]);\r\n  const EXPIRE_HOURS = 24;\r\n\r\n  // Fetch notifications on mount\r\n  useEffect(() => {\r\n    fetchNotifications(); \r\n    subscribeToNotifications();\r\n    fetchAllUsers();\r\n  }, []);\r\n\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const { data, error } = await supabase.from('users').select('id, email, role');\r\n      if (error) throw error;\r\n      setUsers(data || []);\r\n      return data.map((user) => user.id); // Extract user IDs\r\n    } catch (error: any) {\r\n      console.error('Error fetching users:', error.message);\r\n      return [];    }\r\n  };\r\n\r\n  // Fetch notifications from Supabase\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('notifications')\r\n        .select(`\r\n          *,\r\n          users: user_id(email, role)\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n      if (error) throw error;\r\n      setNotifications(data || []);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n      showNotification(error.message, 'Error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Subscribe to real-time updates\r\n  const subscribeToNotifications = () => {\r\n    const subscription = supabase\r\n      .channel('notifications')\r\n      \r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'notifications',\r\n        },\r\n        async (payload) => {\r\n          console.log('Notification change detected:', payload);\r\n\r\n          // Validate payload\r\n          if (!payload.new || !(payload.new as Notification).id) {\r\n            console.warn('Invalid payload received:', payload);\r\n            return;\r\n          }\r\n\r\n          if (payload.eventType === 'INSERT') {\r\n            const newNotif = payload.new as Notification;\r\n            \r\n            // Avoid duplicates\r\n            setNotifications((prev) => {\r\n              const exists = prev.some(n => n.id === newNotif.id);\r\n              if (exists) {\r\n                console.warn('Duplicate notification skipped:', newNotif.id);\r\n                return prev;\r\n              }\r\n          \r\n              // Fetch user info if not already available\r\n              const currentUser = prev.find(n => n.id === newNotif.id)?.users;\r\n              if (currentUser) {\r\n                return [{ ...newNotif, users: currentUser }, ...prev];\r\n              }\r\n          \r\n              // Otherwise fetch user data\r\n              supabase\r\n                .from('users')\r\n                .select('email, role')\r\n                .eq('id', newNotif.user_id)\r\n                .single()\r\n                .then(({ data, error }) => {\r\n                  if (error) throw error;\r\n          \r\n                  setNotifications((innerPrev) => {\r\n                    const alreadyExists = innerPrev.some(n => n.id === newNotif.id);\r\n                    if (alreadyExists) return innerPrev;\r\n          \r\n                    return [\r\n                      {\r\n                        ...newNotif,\r\n                        users: { email: data?.email || '', role: data?.role || '' },\r\n                      },\r\n                      ...innerPrev,\r\n                    ];\r\n                  });\r\n                })\r\n                .then(() => Promise.resolve())\r\n                .then(undefined, (err: Error) => {\r\n                  console.error('Error fetching user data:', err.message);\r\n                });\r\n          \r\n              // Temporarily add without user data until resolved\r\n              return [\r\n                {\r\n                  ...newNotif,\r\n                  users: { email: '', role: '' },\r\n                },\r\n                ...prev,\r\n              ];\r\n            });\r\n          }  else if (payload.eventType === 'UPDATE') {\r\n            setNotifications((prev) =>\r\n              prev.map((n) =>\r\n                n.id === payload.new.id\r\n                  ? ({\r\n                      ...payload.new,\r\n                      users: n.users,\r\n                    } as Notification & { users: { email: string; role: string } })\r\n                  : n\r\n              )\r\n            );\r\n          } else if (payload.eventType === 'DELETE') {\r\n            setNotifications((prev) => prev.filter((n) => n.id !== payload.old.id));\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n     \r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  };\r\n\r\n  \r\n  // Create or update a notification\r\n  const handleCreateOrUpdateNotification = async () => {\r\n    if (!newNotification || !user) return;\r\n  \r\n    // Strip out local-only fields before sending to Supabase\r\n    const { isOptimistic, id, ...rest } = newNotification;\r\n    // Determine who is creating the notification\r\n  \r\n    // Declare tempId outside the try block for scope accessibility\r\n    const tempId = `temp-${Date.now()}`;\r\n\r\n    try {\r\n      let notificationsToInsert;\r\n  \r\n      if (targetUser === 'all') {\r\n        // Fetch all user IDs\r\n        const allUserIds = await fetchAllUsers();\r\n  \r\n        // Prepare notification data for each user\r\n        notificationsToInsert = allUserIds.map((userId) => ({\r\n          ...rest,\r\n          user_id: userId, // Associate notification with each user\r\n          read: false, // Default value for unread notifications\r\n          created_at: new Date().toISOString(),\r\n          created_by: newNotification.created_by || 'System', // Include the creator\r\n        }));\r\n      } else {\r\n        // Prepare notification data for the specific user\r\n        notificationsToInsert = [\r\n          {\r\n            ...rest,\r\n            user_id: targetUser, // Associate notification with the selected user\r\n            read: false, // Default value for unread notifications\r\n            created_at: new Date().toISOString(),\r\n            created_by: newNotification.created_by || 'System', // Include the creator\r\n\r\n          },\r\n        ];\r\n      }\r\n  \r\n      // Optimistic update for the UI\r\n      setNotifications((prev) => [\r\n        {\r\n          ...newNotification,\r\n          id: tempId,\r\n          isOptimistic: true,\r\n          created_at: new Date().toISOString(),\r\n          created_by: newNotification.created_by || 'System', // Include the creator\r\n          users: { email: user?.email || 'System', role: user?.role || 'System' }, // Placeholder for admin/lab manager users or System-generated notifications\r\n        } as any,\r\n        ...prev,\r\n      ]);\r\n  \r\n      let result: { data: LocalNotification[] | null; error: any } | undefined;\r\n  \r\n      if (isEditing && newNotification.id) {\r\n        // Update an existing notification\r\n        result = await supabase\r\n          .from('notifications')\r\n          .update({ ...rest, created_by: newNotification.created_by  })\r\n          .eq('id', newNotification.id);\r\n  \r\n        if (result.error) throw result.error;\r\n  \r\n        setSnackbarMessage('Notification updated successfully!');\r\n        setNotifications((prev) =>\r\n          prev.map((n) =>\r\n            n.id === newNotification.id ? ({ ...n, isOptimistic: false } as any) : n\r\n          )\r\n        );\r\n      } else {\r\n        // Insert notifications\r\n        result = await supabase.from('notifications').insert(notificationsToInsert).select();\r\n  \r\n        if (result.error) throw result.error;\r\n  \r\n        setSnackbarMessage(\r\n          targetUser === 'all'\r\n            ? 'Notification sent to all users successfully!'\r\n            : 'Notification sent to the selected user successfully!'\r\n        );\r\n  \r\n        setNotifications((prev) =>\r\n          prev.map((n) =>\r\n            n.id === tempId && result?.data?.[0]\r\n              ? ({ ...n, ...result.data[0], isOptimistic: false } as any)\r\n              : n\r\n          )\r\n        );\r\n      }\r\n  \r\n      setIsEditing(false);\r\n      setNewNotification(null);\r\n      setSnackbarOpen(true);\r\n      setDialogOpen(false);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n      showNotification(error.message, 'Error');\r\n      // Rollback optimistic update\r\n      setNotifications((prev) => prev.filter((n) => n.id !== tempId));\r\n    }\r\n  };\r\n\r\n  // Handle editing a notification\r\n  const handleEditNotification = (notification: Notification & { users: { email: string; role: string } }) => {\r\n    setNewNotification(notification);\r\n    setIsEditing(true);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  // Handle deleting a notification\r\n  const handleDeleteNotification = async () => {\r\n    if (!notificationToDelete) return;\r\n    try {\r\n      const confirmed = await confirm({\r\n        title: 'Delete Notification',\r\n        message: 'Are you sure you want to delete this notification?',\r\n        confirmText: 'Delete',\r\n        severity: 'error',\r\n      });\r\n      if (!confirmed) return;\r\n      const { error } = await supabase\r\n        .from('notifications')\r\n        .delete()\r\n        .eq('id', notificationToDelete);\r\n      if (error) throw error;\r\n      setSnackbarMessage('Notification deleted successfully!');\r\n      setSnackbarOpen(true);\r\n      fetchNotifications();\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setDeleteDialogOpen(false);\r\n      setNotificationToDelete(null);\r\n    }\r\n  };\r\n  const filteredAndSortedNotifications = notifications\r\n  .filter((n) => {\r\n    const matchesSearch = filterText\r\n      ? n.title.toLowerCase().includes(filterText.toLowerCase()) ||\r\n        n.message.toLowerCase().includes(filterText.toLowerCase())\r\n      : true;\r\n\r\n    const matchesType = filterType ? n.type === filterType : true;\r\n    const matchesRole = filterRole ? n.created_by === filterRole : true;\r\n\r\n    // Apply expiration filter\r\n    const createdDate = new Date(n.created_at);\r\n    const expiredThreshold = new Date(Date.now() - EXPIRE_HOURS * 60 * 60 * 1000);\r\n    const isExpired = createdDate < expiredThreshold;\r\n\r\n    return matchesSearch && matchesType && matchesRole && !isExpired;\r\n  })\r\n  .sort((a, b) => {\r\n    if (sortBy === 'created_at') {\r\n      return sortOrder === 'asc'\r\n        ? new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\r\n        : new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\r\n        \r\n    } else {\r\n      return sortOrder === 'asc'\r\n        ? a.type.localeCompare(b.type)\r\n        : b.type.localeCompare(a.type);\r\n    }\r\n\r\n\r\n   \r\n  });\r\n\r\n\r\n\r\n  // Notification type options\r\n  const notificationTypes = ['Info', 'Warning', 'Error', 'Success', 'System'];\r\n  const notificationCreator = ['admin', 'lab_manager'];\r\n  \r\n  const paginatedNotifications = filteredAndSortedNotifications.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n\r\n\r\n  function truncateEmail(email: string): React.ReactNode {\r\n    const maxLength = 20; // Maximum length before truncating\r\n    if (email.length <= maxLength) {\r\n      return email;\r\n    }\r\n    const [localPart, domain] = email.split('@');\r\n    const truncatedLocalPart = localPart.slice(0, maxLength - domain.length - 3); // Account for \"...\" and domain\r\n    return `${truncatedLocalPart}...@${domain}`;\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ p: 3 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Notification Management\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            const createdBy = user?.role || 'System'; // Use the user's role or default to 'System'\r\n            setNewNotification({\r\n              title: '',\r\n              message: '',\r\n              type: '',\r\n              created_by: createdBy, // Set the creator\r\n            });\r\n            setIsEditing(false);\r\n            setDialogOpen(true);\r\n          }}\r\n        >\r\n          Create Notification\r\n        </Button>\r\n      </Box>\r\n        \r\n        {/* Search and Filters */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          {/* Search Field */}\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Search by Title or Message\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              value={filterText}\r\n              onChange={(e) => setFilterText(e.target.value)}\r\n              InputProps={{\r\n                sx: { borderRadius: 2 }\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          {/* Notification Type Filter */}\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel>Type</InputLabel>\r\n              <Select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                label=\"Type\"\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                <MenuItem value=\"\">All Types</MenuItem>\r\n                {notificationTypes.map((type) => (\r\n                  <MenuItem key={type} value={type}>\r\n                    {type}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {/* The Creator Role Filter */}\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel>The Creator Role</InputLabel>\r\n              <Select\r\n                value={filterRole}\r\n                onChange={(e) => setFilterRole(e.target.value)}\r\n                label=\"The Creator Role\"\r\n                sx={{ borderRadius: 2 }}\r\n              >\r\n                <MenuItem value=\"\">All Creators</MenuItem>\r\n                {notificationCreator.map((createdby) => (\r\n                  <MenuItem key={createdby} value={createdby}>\r\n                    {createdby}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {/* Sort Options */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            Sorted by: {sortBy === 'created_at' ? 'Date' : 'Type'} ({sortOrder.toUpperCase()})\r\n          </Typography>\r\n\r\n          <Box>\r\n            <Button\r\n              variant={sortBy === 'created_at' ? 'contained' : 'outlined'}\r\n              color={sortBy === 'created_at' ? 'primary' : 'inherit'}\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setSortBy('created_at');\r\n                setSortOrder((prev) => (prev === 'asc' ? 'desc' : 'asc'));\r\n              }}\r\n              sx={{ mr: 1, fontWeight: sortBy === 'created_at' ? 'bold' : 'normal' }}\r\n            >\r\n              Created At {sortBy === 'created_at' && (sortOrder === 'asc' ? '↑' : '↓')}\r\n            </Button>\r\n\r\n            <Button\r\n              variant={sortBy === 'type' ? 'contained' : 'outlined'}\r\n              color={sortBy === 'type' ? 'primary' : 'inherit'}\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setSortBy('type');\r\n                setSortOrder((prev) => (prev === 'asc' ? 'desc' : 'asc'));\r\n              }}\r\n              sx={{ ml: 1, fontWeight: sortBy === 'type' ? 'bold' : 'normal' }}\r\n            >\r\n              Type {sortBy === 'type' && (sortOrder === 'asc' ? '↑' : '↓')}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n\r\n\r\n      {/* Error Handling */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Dialog for Creating/Updating Notifications */}\r\n      <Dialog\r\n        open={DialogOpen}\r\n        onClose={() => {\r\n          setDialogOpen(false);\r\n          setNewNotification(null);\r\n          setIsEditing(false);\r\n        }}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        sx={{\r\n          '& .MuiDialog-paper': {\r\n            maxHeight: '80vh',\r\n            overflowY: 'auto',\r\n            borderRadius: 2,\r\n            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.2)',\r\n\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle>{isEditing ? 'Edit Notification' : 'Create Notification'}</DialogTitle>\r\n        <DialogContent sx={{ p: 1, overflow: 'auto', maxHeight: '60vh', mt: 2, mb: 2, borderRadius: 2 }}>  \r\n        \r\n          <FormControl fullWidth sx={{ mb: 2, mt: 2 }}>\r\n            <InputLabel id=\"send-to-label\"  sx={{ mb: 2 }}>\r\n              Send To\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"send-to-label\"\r\n              value={targetUser}\r\n              onChange={(e) => setTargetUser(e.target.value)}\r\n              label=\"Send To\"\r\n              MenuProps={{\r\n                PaperProps: {\r\n                  style: {\r\n                    maxHeight: 200,\r\n                    overflowY: 'auto',\r\n                  },\r\n                },\r\n              }}\r\n            >\r\n              <MenuItem value=\"all\">All Users</MenuItem>\r\n              {users.map((user) => (\r\n                <MenuItem key={user.id} value={user.id}>\r\n                  {truncateEmail(user.email)}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          <TextField\r\n            label=\"Created By\"\r\n            value={newNotification?.created_by || 'Unknown'}\r\n            disabled\r\n            fullWidth\r\n            sx={{ mb: 2 }}\r\n          />\r\n          <TextField\r\n            label=\"Title\"\r\n            value={newNotification?.title || ''}\r\n            onChange={(e) => setNewNotification({ ...newNotification, title: e.target.value })}\r\n            fullWidth\r\n            sx={{ mb: 2 }}\r\n          />\r\n          <TextField\r\n            label=\"Message\"\r\n            value={newNotification?.message || ''}\r\n            onChange={(e) => setNewNotification({ ...newNotification, message: e.target.value })}\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          <Select\r\n            value={newNotification?.type || ''}\r\n            onChange={(e) => setNewNotification({ ...newNotification, type: e.target.value })}\r\n            fullWidth\r\n            displayEmpty\r\n            sx={{ mb: 2 }}\r\n          >\r\n            <MenuItem value=\"\" disabled>\r\n              Select Notification Type\r\n            </MenuItem>\r\n            {notificationTypes.map((type) => (\r\n              <MenuItem key={type} value={type}>\r\n                {type}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDialogOpen(false)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleCreateOrUpdateNotification}\r\n            color=\"primary\"\r\n            startIcon={isEditing ? <CheckCircleIcon /> : undefined}\r\n            autoFocus\r\n          >\r\n            {isEditing ? 'Update Notification' : 'Create Notification'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Indicator */}\r\n      {loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Created By</TableCell>\r\n                <TableCell>Title</TableCell>\r\n                <TableCell>Message</TableCell>\r\n                <TableCell>Type</TableCell>\r\n                <TableCell>Created At</TableCell>\r\n                <TableCell>Users</TableCell>\r\n                <TableCell>Role</TableCell>\r\n                <TableCell>Read</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedNotifications.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={7} align=\"center\">\r\n                    No notifications available.\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                paginatedNotifications.map((notification) => (\r\n                  <TableRow key={notification.id}>\r\n                    <TableCell>{notification.created_by || 'Unknown'}</TableCell>\r\n                    <TableCell>{notification.title}</TableCell>\r\n                    <TableCell>{notification.message}</TableCell>\r\n                    <TableCell>{notification.type}</TableCell>\r\n                    <TableCell>{new Date(notification.created_at).toLocaleString()}</TableCell>\r\n                    <TableCell>{notification.users.email || 'Unknown'}</TableCell>\r\n                    <TableCell>{notification.users.role || 'Unknown'}</TableCell>\r\n                    <TableCell>{notification.read ? 'Yes' : 'No'}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <IconButton color=\"primary\" onClick={() => handleEditNotification(notification)}>\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                      <IconButton\r\n                        color=\"error\"\r\n                        onClick={() => {\r\n                          setNotificationToDelete(notification.id);\r\n                          setDeleteDialogOpen(true);\r\n                        }}\r\n                      >\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n\r\n          {/* Pagination outside the Table, inside TableContainer */}\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={notifications.length}\r\n            page={page}\r\n            onPageChange={(_, newPage) => setPage(newPage)}\r\n            rowsPerPage={rowsPerPage}\r\n            onRowsPerPageChange={(e) => {\r\n              setRowsPerPage(parseInt(e.target.value, 10));\r\n              setPage(0);\r\n            }}\r\n          />\r\n        </TableContainer>\r\n      )}\r\n\r\n      {/* Snackbar for Success Messages */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={() => setSnackbarOpen(false)}\r\n        message={snackbarMessage}\r\n      />\r\n\r\n      {/* Confirmation Dialog for Deletion */}\r\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\r\n        <DialogTitle>Delete Notification</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <WarningIcon color=\"warning\" sx={{ mr: 2 }} />\r\n            <Typography>Are you sure you want to delete this notification?</Typography>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDeleteNotification} color=\"error\" autoFocus>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <NotificationComponent />\r\n      <ConfirmDialogComponent />\r\n    </Box>\r\n  );\r\n}"],"names":["NotificationManagement","newNotification","setNewNotification","useState","notifications","setNotifications","user","useAuth","loading","setLoading","error","setError","showNotification","NotificationComponent","useNotification","confirm","ConfirmDialogComponent","useConfirmDialog","isEditing","setIsEditing","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","deleteDialogOpen","setDeleteDialogOpen","DialogOpen","setDialogOpen","notificationToDelete","setNotificationToDelete","page","setPage","rowsPerPage","setRowsPerPage","filterText","setFilterText","filterType","setFilterType","filterRole","setFilterRole","sortBy","setSortBy","sortOrder","setSortOrder","targetUser","setTargetUser","users","setUsers","EXPIRE_HOURS","useEffect","fetchNotifications","subscribeToNotifications","fetchAllUsers","data","supabase","subscription","payload","newNotif","prev","currentUser","innerPrev","n","err","handleCreateOrUpdateNotification","isOptimistic","id","rest","tempId","notificationsToInsert","userId","result","handleEditNotification","notification","handleDeleteNotification","filteredAndSortedNotifications","matchesSearch","matchesType","matchesRole","createdDate","expiredThreshold","isExpired","a","b","notificationTypes","notificationCreator","paginatedNotifications","truncateEmail","email","localPart","domain","Box","jsxs","jsx","Typography","Button","createdBy","Grid","TextField","e","FormControl","InputLabel","Select","MenuItem","type","createdby","Alert","Dialog","DialogTitle","DialogContent","DialogActions","CheckCircleIcon","CircularProgress","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","IconButton","EditIcon","DeleteIcon","TablePagination","_","newPage","Snackbar","WarningIcon"],"mappings":"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"}