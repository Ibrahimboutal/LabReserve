{"version":3,"file":"AutoApprovalSettings-jQeKaInu.js","sources":["../../node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js","../../node_modules/@mui/material/FormControlLabel/FormControlLabel.js","../../src/components/admin/AutoApprovalSettings.tsx"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getFormControlLabelUtilityClasses(slot) {\n  return generateUtilityClass('MuiFormControlLabel', slot);\n}\nconst formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error', 'required', 'asterisk']);\nexport default formControlLabelClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checked\", \"className\", \"componentsProps\", \"control\", \"disabled\", \"disableTypography\", \"inputRef\", \"label\", \"labelPlacement\", \"name\", \"onChange\", \"required\", \"slotProps\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useFormControl } from '../FormControl';\nimport Stack from '../Stack';\nimport Typography from '../Typography';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport formControlLabelClasses, { getFormControlLabelUtilityClasses } from './formControlLabelClasses';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    labelPlacement,\n    error,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error', required && 'required'],\n    label: ['label', disabled && 'disabled'],\n    asterisk: ['asterisk', error && 'error']\n  };\n  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);\n};\nexport const FormControlLabelRoot = styled('label', {\n  name: 'MuiFormControlLabel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${formControlLabelClasses.label}`]: styles.label\n    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  // For correct alignment with the text.\n  verticalAlign: 'middle',\n  WebkitTapHighlightColor: 'transparent',\n  marginLeft: -11,\n  marginRight: 16,\n  // used for row presentation of radio/checkbox\n  [`&.${formControlLabelClasses.disabled}`]: {\n    cursor: 'default'\n  }\n}, ownerState.labelPlacement === 'start' && {\n  flexDirection: 'row-reverse',\n  marginLeft: 16,\n  // used for row presentation of radio/checkbox\n  marginRight: -11\n}, ownerState.labelPlacement === 'top' && {\n  flexDirection: 'column-reverse',\n  marginLeft: 16\n}, ownerState.labelPlacement === 'bottom' && {\n  flexDirection: 'column',\n  marginLeft: 16\n}, {\n  [`& .${formControlLabelClasses.label}`]: {\n    [`&.${formControlLabelClasses.disabled}`]: {\n      color: (theme.vars || theme).palette.text.disabled\n    }\n  }\n}));\nconst AsteriskComponent = styled('span', {\n  name: 'MuiFormControlLabel',\n  slot: 'Asterisk',\n  overridesResolver: (props, styles) => styles.asterisk\n})(({\n  theme\n}) => ({\n  [`&.${formControlLabelClasses.error}`]: {\n    color: (theme.vars || theme).palette.error.main\n  }\n}));\n\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\nconst FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(inProps, ref) {\n  var _ref, _slotProps$typography;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiFormControlLabel'\n  });\n  const {\n      className,\n      componentsProps = {},\n      control,\n      disabled: disabledProp,\n      disableTypography,\n      label: labelProp,\n      labelPlacement = 'end',\n      required: requiredProp,\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;\n  const required = requiredProp != null ? requiredProp : control.props.required;\n  const controlProps = {\n    disabled,\n    required\n  };\n  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {\n    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {\n      controlProps[key] = props[key];\n    }\n  });\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    labelPlacement,\n    required,\n    error: fcs.error\n  });\n  const classes = useUtilityClasses(ownerState);\n  const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;\n  let label = labelProp;\n  if (label != null && label.type !== Typography && !disableTypography) {\n    label = /*#__PURE__*/_jsx(Typography, _extends({\n      component: \"span\"\n    }, typographySlotProps, {\n      className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),\n      children: label\n    }));\n  }\n  return /*#__PURE__*/_jsxs(FormControlLabelRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/React.cloneElement(control, controlProps), required ? /*#__PURE__*/_jsxs(Stack, {\n      display: \"block\",\n      children: [label, /*#__PURE__*/_jsxs(AsteriskComponent, {\n        ownerState: ownerState,\n        \"aria-hidden\": true,\n        className: classes.asterisk,\n        children: [\"\\u2009\", '*']\n      })]\n    }) : label]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlLabel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: PropTypes.element.isRequired,\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: PropTypes.node,\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement: PropTypes.oneOf(['bottom', 'end', 'start', 'top']),\n  /**\n   * @ignore\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    typography: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlLabel;","import { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Switch,\r\n  FormControlLabel,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  CircularProgress,\r\n  Alert,\r\n  Snackbar,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TableFooter,\r\n  TablePagination,\r\n} from '@mui/material';\r\nimport { format } from 'date-fns';\r\nimport HistoryIcon from '@mui/icons-material/History';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport { AutoApprovalSetting, AutoApprovalLog } from '@/types';\r\n\r\nexport default function AutoApprovalSettings() {\r\n  const { user } = useAuth();\r\n  const [settings, setSettings] = useState<AutoApprovalSetting[]>([]);\r\n  const [logs, setLogs] = useState<AutoApprovalLog[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [logsDialogOpen, setLogsDialogOpen] = useState(false);\r\n  const [equipment, setEquipment] = useState<any[]>([]);\r\n  const [labs, setLabs] = useState<any[]>([]);\r\n  const [users, setUsers] = useState<any[]>([]);\r\n  const [systemSetting, setSystemSetting] = useState<boolean>(false);\r\n  const [labPage, setLabPage] = useState(0);\r\n  const [labRowsPerPage, setLabRowsPerPage] = useState(5); // Default rows per page for Labs\r\n  const [equipmentPage, setEquipmentPage] = useState(0);\r\n  const [equipmentRowsPerPage, setEquipmentRowsPerPage] = useState(5);\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    subscribeToChanges();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n            if (!user) throw new Error('User not authenticated');\r\n\r\n      const [settingsData, logsData, equipmentData, labsData, usersData] = await Promise.all([\r\n        supabase.from('auto_approval_settings').select('*').order('created_at', { ascending: false }),\r\n        supabase.from('auto_approval_logs').select('*').order('created_at', { ascending: false }),\r\n        supabase.from('equipment').select('id, name, lab_id').eq('status', 'operational'),\r\n        supabase.from('lab').select('id, name'),\r\n        supabase.from('users').select('*'),\r\n      ]);\r\n      if (settingsData.error) throw settingsData.error;\r\n      if (logsData.error) throw logsData.error;\r\n      if (equipmentData.error) throw equipmentData.error;\r\n      if (labsData.error) throw labsData.error;\r\n      if (usersData.error) throw usersData.error;\r\n\r\n      // Enrich logs data\r\n      const enrichedLogs = logsData.data.map((log) => {\r\n        const setting = settingsData.data.find((s) => s.id === log.setting_id);\r\n        let targetName = 'Unknown Target';\r\n        if (setting) {\r\n          if (setting.target_type === 'system') {\r\n            targetName = 'System';\r\n          } else if (setting.target_type === 'lab') {\r\n            const lab = labsData.data.find((l) => l.id === setting.target_id);\r\n            targetName = lab ? lab.name : 'Unknown Lab';\r\n          } else if (setting.target_type === 'equipment') {\r\n            const equipment = equipmentData.data.find((e) => e.id === setting.target_id);\r\n            targetName = equipment ? equipment.name : 'Unknown Equipment';\r\n          }\r\n        }\r\n        const user = usersData.data.find((u) => u.id === log.performed_by);\r\n        const performedByEmail = user ? user.email : 'Unknown User';\r\n        const performedByRole = user ? user.role : 'Unknown User';\r\n        return {\r\n          ...log,\r\n          target_name: targetName,\r\n          performed_by_email: performedByEmail,\r\n          performed_by_role: performedByRole,\r\n        };\r\n      });\r\n\r\n      setSettings(settingsData.data);\r\n      setLogs(enrichedLogs);\r\n      setEquipment(equipmentData.data);\r\n      setLabs(labsData.data);\r\n      setUsers(usersData.data || []);\r\n\r\n      // Set system-wide setting\r\n      const systemSettings = settingsData.data.find(\r\n        (s: AutoApprovalSetting) => s.target_type === 'system'\r\n      );\r\n      setSystemSetting(systemSettings?.enabled || false);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const validateAutoApprovalSetting = (data: any): AutoApprovalSetting => {\r\n    const requiredFields = [\r\n      'id',\r\n      'target_type',\r\n      'enabled',\r\n      'created_by',\r\n      'last_modified_by',\r\n      'created_at',\r\n      'updated_at',\r\n    ];\r\n    for (const field of requiredFields) {\r\n      if (!(field in data)) {\r\n        throw new Error(`Missing required field '${field}' in AutoApprovalSetting`);\r\n      }\r\n    }\r\n    return data as AutoApprovalSetting;\r\n  };\r\n\r\n  const subscribeToChanges = () => {\r\n    // Helper to avoid duplicates by ID\r\n    const upsertById = <T extends { id: string }>(array: T[], newItem: T): T[] => {\r\n      return array.some((item) => item.id === newItem.id)\r\n        ? array.map((item) => (item.id === newItem.id ? newItem : item))\r\n        : [newItem, ...array];\r\n    };\r\n  \r\n    // Subscribe to changes in 'auto_approval_settings'\r\n    const settingsSubscription = supabase\r\n      .channel('auto-approval-settings-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'auto_approval_settings',\r\n        },\r\n        (payload) => {\r\n          setSettings((prev) => {\r\n            if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {\r\n              try {\r\n                const validatedSetting = validateAutoApprovalSetting(payload.new);\r\n  \r\n                // Update systemSetting if it's a system-wide setting\r\n                if (validatedSetting.target_type === 'system') {\r\n                  setSystemSetting(validatedSetting.enabled);\r\n                }\r\n  \r\n                // Deduplicate based on ID\r\n                const updatedSettings = upsertById(prev, validatedSetting);\r\n                return updatedSettings;\r\n              } catch (error) {\r\n                console.error('Invalid payload:', error);\r\n                return prev;\r\n              }\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((s) => s.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in 'auto_approval_logs'\r\n    const logsSubscription = supabase\r\n      .channel('auto-approval-logs-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'INSERT',\r\n          schema: 'public',\r\n          table: 'auto_approval_logs',\r\n        },\r\n        async (payload) => {\r\n          console.log('New log entry received:', payload);\r\n          try {\r\n            const newLog = payload.new as AutoApprovalLog;\r\n  \r\n            let setting = settings.find((s) => s.id === newLog.setting_id);\r\n            if (!setting) {\r\n              console.warn('Setting not found locally, fetching from database...');\r\n              const { data: fetchedSetting, error: settingError } = await supabase\r\n                .from('auto_approval_settings')\r\n                .select('*')\r\n                .eq('id', newLog.setting_id)\r\n                .single();\r\n              if (settingError) {\r\n                console.error('Error fetching setting:', settingError);\r\n                return;\r\n              }\r\n              setting = fetchedSetting;\r\n              setSettings((prev) => upsertById(prev, fetchedSetting));\r\n            }\r\n  \r\n            let targetName = 'Unknown Target';\r\n            if (setting) {\r\n              if (setting.target_type === 'system') {\r\n                targetName = 'System';\r\n              } else if (setting.target_type === 'lab') {\r\n                let lab = labs.find((l) => l.id === setting.target_id);\r\n                if (!lab) {\r\n                  console.warn('Lab not found locally, fetching from database...');\r\n                  const { data: fetchedLab, error: labError } = await supabase\r\n                    .from('lab')\r\n                    .select('*')\r\n                    .eq('id', setting.target_id)\r\n                    .single();\r\n                  if (labError) {\r\n                    console.error('Error fetching lab:', labError);\r\n                  } else {\r\n                    lab = fetchedLab;\r\n                    setLabs((prev) => upsertById(prev, fetchedLab));\r\n                  }\r\n                }\r\n                targetName = lab ? lab.name : 'Unknown Lab';\r\n              } else if (setting.target_type === 'equipment') {\r\n                let equipmentItem = equipment.find((e) => e.id === setting.target_id);\r\n                if (!equipmentItem) {\r\n                  console.warn('Equipment not found locally, fetching from database...');\r\n                  const { data: fetchedEquipment, error: equipmentError } = await supabase\r\n                    .from('equipment')\r\n                    .select('*')\r\n                    .eq('id', setting.target_id)\r\n                    .single();\r\n                  if (equipmentError) {\r\n                    console.error('Error fetching equipment:', equipmentError);\r\n                  } else {\r\n                    equipmentItem = fetchedEquipment;\r\n                    setEquipment((prev) => upsertById(prev, fetchedEquipment));\r\n                  }\r\n                }\r\n                targetName = equipmentItem ? equipmentItem.name : 'Unknown Equipment';\r\n              }\r\n            }\r\n  \r\n            let performedByUser = users.find((u) => u.id === newLog.performed_by);\r\n            if (!performedByUser) {\r\n              console.warn('User not found locally, fetching from database...');\r\n              const { data: fetchedUser, error: userError } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('id', newLog.performed_by)\r\n                .single();\r\n              if (userError) {\r\n                console.error('Error fetching user:', userError);\r\n              } else {\r\n                performedByUser = fetchedUser;\r\n                setUsers((prev) => upsertById(prev, fetchedUser));\r\n              }\r\n            }\r\n  \r\n            const performedByEmail = performedByUser ? performedByUser.email : 'Unknown User';\r\n            const performedByRole = performedByUser ? performedByUser.role : 'Unknown Role';\r\n  \r\n            const enrichedLog = {\r\n              ...newLog,\r\n              target_name: targetName,\r\n              performed_by_email: performedByEmail,\r\n              performed_by_role: performedByRole,\r\n            };\r\n  \r\n            console.log('Enriched log:', enrichedLog);\r\n            setLogs((prev) => [enrichedLog, ...prev]);\r\n          } catch (error) {\r\n            console.error('Error enriching log:', error);\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in 'users'\r\n    const usersSubscription = supabase\r\n      .channel('users-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'users',\r\n        },\r\n        (payload) => {\r\n          setUsers((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              return upsertById(prev, payload.new);\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              return prev.map((u) => (u.id === payload.old.id ? payload.new : u));\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((u) => u.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in 'lab'\r\n    const labsSubscription = supabase\r\n      .channel('labs-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'lab',\r\n        },\r\n        (payload) => {\r\n          setLabs((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              return upsertById(prev, payload.new);\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              return prev.map((l) => (l.id === payload.old.id ? payload.new : l));\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((l) => l.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in 'equipment'\r\n    const equipmentSubscription = supabase\r\n      .channel('equipment-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'equipment',\r\n        },\r\n        (payload) => {\r\n          setEquipment((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              return upsertById(prev, payload.new);\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              return prev.map((e) => (e.id === payload.old.id ? payload.new : e));\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((e) => e.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Cleanup subscriptions on unmount\r\n    return () => {\r\n      settingsSubscription.unsubscribe();\r\n      logsSubscription.unsubscribe();\r\n      usersSubscription.unsubscribe();\r\n      labsSubscription.unsubscribe();\r\n      equipmentSubscription.unsubscribe();\r\n    };\r\n  };\r\n\r\n  const sendNotificationToAllUsers = async (\r\n  createdBy: string,\r\n  title: string,\r\n  message: string,\r\n  type: string\r\n) => {\r\n  try {\r\n    const notifications = users.map((user) => ({\r\n      id: crypto.randomUUID(), // Ensure unique ID per notification\r\n      user_id: user.id,\r\n      created_by: createdBy,\r\n      title,\r\n      message,\r\n      type,\r\n      read: false,\r\n      created_at: new Date().toISOString(),\r\n    }));\r\n\r\n    const { error } = await supabase.from('notifications').insert(notifications);\r\n\r\n    if (error) throw error;\r\n  } catch (error: any) {\r\n    console.error('Error sending notifications:', error.message);\r\n  }\r\n};\r\n\r\n  const handleToggle = async (\r\n    targetType: 'system' | 'lab' | 'equipment',\r\n    targetId: string | null,\r\n    currentEnabled: boolean\r\n  ) => {\r\n    if (!user) {\r\n      console.error('User is not authenticated');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      // Optimistically update UI\r\n      if (targetType === 'system') {\r\n        setSystemSetting((prev) => !prev); // Toggle systemSetting state\r\n      }\r\n      setSettings((prev) => {\r\n        const existingSetting = prev.find(\r\n          (s) => s.target_type === targetType && s.target_id === targetId\r\n        );\r\n        if (existingSetting) {\r\n          return prev.map((s) =>\r\n            s.id === existingSetting.id\r\n              ? { ...s, enabled: !currentEnabled, updated_at: new Date().toISOString() }\r\n              : s\r\n          );\r\n        } else {\r\n          const newSetting: AutoApprovalSetting = {\r\n            id: crypto.randomUUID(), \r\n            target_type: targetType,\r\n            target_id: targetType === 'system' ? null : targetId || '', \r\n            enabled: !currentEnabled,\r\n            created_by: user.id,\r\n            last_modified_by: user.id,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          };\r\n          return [newSetting, ...prev];\r\n        }\r\n      });\r\n  \r\n      // Perform actual DB operation\r\n      const existingSetting = settings.find(\r\n        (s) => s.target_type === targetType && s.target_id === targetId\r\n      );\r\n      let settingId = existingSetting?.id;\r\n  \r\n      if (existingSetting) {\r\n        const { error: updateError } = await supabase\r\n          .from('auto_approval_settings')\r\n          .update({\r\n            enabled: !currentEnabled,\r\n            last_modified_by: user.id,\r\n            updated_at: new Date().toISOString(),\r\n          })\r\n          .eq('id', existingSetting.id);\r\n        if (updateError) throw updateError;\r\n      } else {\r\n        const { data, error: insertError } = await supabase\r\n          .from('auto_approval_settings')\r\n          .insert([{\r\n            target_type: targetType,\r\n            target_id: targetType === 'system' ? null : targetId || '', // Ensure null for system\r\n            enabled: !currentEnabled,\r\n            created_by: user.id,\r\n            last_modified_by: user.id,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          }])\r\n          .select();\r\n        if (insertError) throw insertError;\r\n        settingId = data?.[0]?.id;\r\n      }\r\n  \r\n      // Insert log entry\r\n      if (settingId) {\r\n        const { error: logError } = await supabase\r\n          .from('auto_approval_logs')\r\n          .insert([{\r\n            setting_id: settingId,\r\n            action: !currentEnabled ? 'enabled' : 'disabled',\r\n            performed_by: user.id,\r\n          }]);\r\n        if (logError) throw logError;\r\n      }\r\n      \r\n    let title = '';\r\n    let message = '';\r\n    const createdBy = 'System'; \r\n    if (targetType === 'system') {\r\n      title = !currentEnabled ? 'System-wide Auto-Approval Activated' : 'System-wide Auto-Approval Deactivated';\r\n      message = !currentEnabled\r\n        ? 'All equipment reservations are now auto-approved.'\r\n        : 'Auto-approval for all equipment reservations has been disabled.';\r\n    } else if (targetType === 'lab') {\r\n      const lab = labs.find((l) => l.id === targetId);\r\n      title = !currentEnabled\r\n        ? `Auto-Approval Activated for Lab: ${lab?.name || 'Unknown Lab'}`\r\n        : `Auto-Approval Deactivated for Lab: ${lab?.name || 'Unknown Lab'}`;\r\n      message = !currentEnabled\r\n        ? `All equipment in this lab is now auto-approved for reservations.`\r\n        : `Auto-approval for equipment in this lab has been disabled.`;\r\n    } else if (targetType === 'equipment') {\r\n      const equipmentItem = equipment.find((e) => e.id === targetId);\r\n      title = !currentEnabled\r\n        ? `Auto-Approval Activated for Equipment: ${equipmentItem?.name || 'Unknown Equipment'}`\r\n        : `Auto-Approval Deactivated for Equipment: ${equipmentItem?.name || 'Unknown Equipment'}`;\r\n      message = !currentEnabled\r\n        ? `This equipment is now auto-approved for reservations.`\r\n        : `Auto-approval for this equipment has been disabled.`;\r\n    }\r\n    await sendNotificationToAllUsers(createdBy, title, message, 'info');\r\n      // Success feedback\r\n      setSnackbarMessage(`Auto-approval ${!currentEnabled ? 'enabled' : 'disabled'} successfully`);\r\n      setSnackbarOpen(true);\r\n    } catch (error: any) {\r\n      console.error('Error toggling auto-approval:', error.message);\r\n      setError(error.message);\r\n  \r\n      // Rollback optimistic update\r\n      if (targetType === 'system') {\r\n        setSystemSetting((prev) => !prev); // Revert systemSetting state\r\n      }\r\n      fetchData(); // Fallback to re-fetching data\r\n    }\r\n  };\r\n\r\n  const getLatestSetting = (targetType: string, targetId?: string) => {\r\n    const relevantSettings = settings\r\n      .filter(\r\n        (s) =>\r\n          s.target_type === targetType &&\r\n          s.target_id === (targetId || null)\r\n      )\r\n      .sort((a, b) =>\r\n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n      );\r\n    return relevantSettings[0]?.enabled || false;\r\n  };\r\n\r\n  const handleChangeLabPage = (_: unknown, newPage: number) => {\r\n    setLabPage(newPage);\r\n  };\r\n\r\n\r\n  const handleChangeLabRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setLabRowsPerPage(parseInt(event.target.value, 10));\r\n    setLabPage(0); // Reset to the first page when changing rows per page\r\n  };\r\n\r\n  const handleChangeEquipmentPage = (_: unknown, newPage: number) => {\r\n    setEquipmentPage(newPage);\r\n  };\r\n\r\n  const handleChangeEquipmentRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEquipmentRowsPerPage(parseInt(event.target.value, 10));\r\n    setEquipmentPage(0); // Reset to the first page when changing rows per page\r\n  };\r\n\r\n  const paginatedData = <T extends any[]>(data: T, equipmentPage: number, equipmentRowsPerPage: number): T => {\r\n    return data.slice(equipmentPage * equipmentRowsPerPage, equipmentPage * equipmentRowsPerPage + equipmentRowsPerPage) as T;\r\n  };\r\n  const labpaginatedData = <T extends any[]>(data: T, labPage: number, labRowsPerPage: number): T => {\r\n    return data.slice(labPage * labRowsPerPage, labPage * labRowsPerPage + labRowsPerPage) as T;\r\n  };\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ m: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Auto-Approval Settings\r\n      </Typography>\r\n\r\n      {/* System-wide Setting */}\r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={systemSetting}\r\n              onChange={() => handleToggle('system', null, systemSetting)}\r\n            />\r\n          }\r\n          label={\r\n            <Box>\r\n              <Typography variant=\"h6\">System-wide Auto-Approval</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Enable automatic approval for all equipment reservations\r\n              </Typography>\r\n            </Box>\r\n          }\r\n        />\r\n      </Paper>\r\n\r\n      {/* Lab Settings */}\r\n      <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n        Laboratory Settings\r\n      </Typography>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Laboratory</TableCell>\r\n              <TableCell>Auto-Approval Status</TableCell>\r\n              <TableCell>Last Modified</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n\r\n            {labpaginatedData.length > 0 && labpaginatedData(labs, labPage, labRowsPerPage).map((lab) => {\r\n            \r\n              const isEnabled = getLatestSetting('lab', lab.id);\r\n              return (\r\n                <TableRow key={lab.id}>\r\n                  <TableCell>{lab.name}</TableCell>\r\n\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={isEnabled ? 'Enabled' : 'Disabled'}\r\n                      color={isEnabled ? 'success' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n\r\n\r\n                  <TableCell>{format(new Date(), 'PPp')}</TableCell>\r\n\r\n                  <TableCell>\r\n                    <Switch\r\n                      checked={isEnabled}\r\n                      onChange={() => handleToggle('lab', lab.id, isEnabled)}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                colSpan={4}\r\n                count={labs.length}\r\n                rowsPerPage={labRowsPerPage}\r\n                page={labPage}\r\n                onPageChange={handleChangeLabPage}\r\n                onRowsPerPageChange={handleChangeLabRowsPerPage}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* Equipment Settings */}\r\n      <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n        Equipment Settings\r\n      </Typography>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Equipment</TableCell>\r\n              <TableCell>Laboratory</TableCell>\r\n              <TableCell>Auto-Approval Status</TableCell>\r\n              <TableCell>Last Modified</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {paginatedData.length > 0 && paginatedData(equipment, equipmentPage, equipmentRowsPerPage).map((item) => {\r\n           \r\n              const isEnabled = getLatestSetting('equipment', item.id);\r\n              const lab = labs.find((l) => l.id === item.lab_id);\r\n              return (\r\n                <TableRow key={item.id}>\r\n                  <TableCell>{item.name}</TableCell>\r\n                  <TableCell>{lab?.name || 'Unknown'}</TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={isEnabled ? 'Enabled' : 'Disabled'}\r\n                      color={isEnabled ? 'success' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>{format(new Date(), 'PPp')}</TableCell>\r\n                  <TableCell>\r\n                    <Switch\r\n                      checked={isEnabled}\r\n                      onChange={() => handleToggle('equipment', item.id, isEnabled)}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                colSpan={5}\r\n                count={equipment.length}\r\n                rowsPerPage={equipmentRowsPerPage}\r\n                page={equipmentPage}\r\n                onPageChange={handleChangeEquipmentPage}\r\n                onRowsPerPageChange={handleChangeEquipmentRowsPerPage}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* View Logs Button */}\r\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n        <Button\r\n          startIcon={<HistoryIcon />}\r\n          onClick={() => setLogsDialogOpen(true)}\r\n        >\r\n          View Audit Logs\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Logs Dialog */}\r\n      <Dialog\r\n        open={logsDialogOpen}\r\n        onClose={() => setLogsDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Auto-Approval Audit Logs</DialogTitle>\r\n        <DialogContent>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell>Action</TableCell>\r\n                <TableCell>Target</TableCell>\r\n                <TableCell>Performed By</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {logs.map((log) => (\r\n                <TableRow key={log.id}>\r\n                  <TableCell>{format(new Date(log.created_at), 'PPp')}</TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={log.action}\r\n                      color={log.action === 'enabled' ? 'success' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>{log.target_name}</TableCell>\r\n                  <TableCell>{log.performed_by_email}({log.performed_by_role})</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setLogsDialogOpen(false)}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Success Snackbar */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbarOpen(false)}\r\n        message={snackbarMessage}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["getFormControlLabelUtilityClasses","slot","generateUtilityClass","formControlLabelClasses","generateUtilityClasses","_excluded","useUtilityClasses","ownerState","classes","disabled","labelPlacement","error","required","slots","capitalize","composeClasses","FormControlLabelRoot","styled","props","styles","theme","_extends","AsteriskComponent","FormControlLabel","React.forwardRef","inProps","ref","_ref","_slotProps$typography","useDefaultProps","className","componentsProps","control","disabledProp","disableTypography","labelProp","requiredProp","slotProps","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","controlProps","key","fcs","formControlState","typographySlotProps","label","Typography","_jsx","clsx","_jsxs","React.cloneElement","Stack","AutoApprovalSettings","user","useAuth","settings","setSettings","useState","logs","setLogs","loading","setLoading","setError","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","logsDialogOpen","setLogsDialogOpen","equipment","setEquipment","labs","setLabs","users","setUsers","systemSetting","setSystemSetting","labPage","setLabPage","labRowsPerPage","setLabRowsPerPage","equipmentPage","setEquipmentPage","equipmentRowsPerPage","setEquipmentRowsPerPage","useEffect","fetchData","subscribeToChanges","supabase","settingsData","logsData","equipmentData","labsData","usersData","enrichedLogs","log","setting","s","targetName","lab","l","e","u","performedByEmail","performedByRole","systemSettings","validateAutoApprovalSetting","data","requiredFields","field","upsertById","array","newItem","item","settingsSubscription","payload","prev","validatedSetting","logsSubscription","newLog","fetchedSetting","settingError","fetchedLab","labError","equipmentItem","fetchedEquipment","equipmentError","performedByUser","fetchedUser","userError","enrichedLog","usersSubscription","labsSubscription","equipmentSubscription","sendNotificationToAllUsers","createdBy","title","message","type","notifications","handleToggle","targetType","targetId","currentEnabled","existingSetting","settingId","updateError","insertError","logError","getLatestSetting","a","b","handleChangeLabPage","_","newPage","handleChangeLabRowsPerPage","event","handleChangeEquipmentPage","handleChangeEquipmentRowsPerPage","paginatedData","labpaginatedData","jsx","Box","CircularProgress","Alert","Paper","Switch","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","isEnabled","Chip","format","TableFooter","TablePagination","Button","HistoryIcon","jsxs","Dialog","DialogTitle","DialogContent","DialogActions","Snackbar"],"mappings":"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","x_google_ignoreList":[0,1]}