{"version":3,"file":"EquipmentManagement-OldqYNSn.js","sources":["../../src/components/labmanager/EquipmentManagement.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  MenuItem,\r\n  CircularProgress,\r\n  Alert,\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  IconButton,\r\n  Tooltip,\r\n  InputAdornment,\r\n  Chip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n} from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { Equipment } from '@/types';\r\n\r\nconst defaultSpecs = {\r\n  dimensions: '',\r\n  weight: '',\r\n  power_requirements: '',\r\n  calibration_interval: '',\r\n  safety_requirements: '',\r\n  operating_conditions: ''\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default function EquipmentManagement() {\r\n  const [equipment, setEquipment] = useState<Equipment[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [editingEquipment, setEditingEquipment] = useState<Equipment | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [categoryFilter, setCategoryFilter] = useState<string>('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('');\r\n  const [uploadingImage, setUploadingImage] = useState(false);\r\n  const [categories, setCategories] = useState<string[]>([]);\r\n  const [users, setUsers] = useState<any[]>([]);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    category: '',\r\n    description: '',\r\n    manufacturer: '',\r\n    model: '',\r\n    quantity: 1,\r\n    image_url: '',\r\n    detailed_specs: defaultSpecs,\r\n    status: 'operational',\r\n    lab_id: '',\r\n  });\r\n  \r\n  const [labs, setLabs] = useState<{ id: string; name: string }[]>([]);\r\n  useEffect(() => {\r\n    fetchLabs();\r\n  }, []);\r\n  \r\n  const fetchLabs = async () => {\r\n    try {\r\n      // Get the current authenticated user\r\n\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n  \r\n      const managerId = user.id;\r\n  \r\n      // Fetch labs managed by the current user\r\n      const { data: managedLabs, error: labsError } = await supabase\r\n        .from('lab')\r\n        .select('id, name, status', { count: 'exact' })\r\n        .eq('manager_id', managerId);\r\n  \r\n      if (labsError) throw labsError;\r\n      if (!managedLabs || managedLabs.length === 0) {\r\n        \r\n\r\n        setLabs([]);\r\n        return;\r\n      }\r\n  \r\n      const managedLabIds = managedLabs.map(lab => lab.id);\r\n      const { data, error } = await supabase\r\n        .from('lab')\r\n        .select('id, name, location')\r\n        .in('id', managedLabIds)\r\n        .order('name');\r\n  \r\n      if (error) throw error;\r\n      setLabs(data);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    }\r\n    finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEquipment();\r\n    fetchCategories().then((categories) => setCategories(categories || []));\r\n    fetchCategories();\r\n    fetchAllUsers();\r\n    \r\n  }, []);\r\n\r\n  const fetchEquipment = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n            if (!user) throw new Error('User not authenticated');\r\n      const managerId = user.id;\r\n        \r\n      // Step 2: Fetch labs managed by the current user\r\n      const { data: managedLabs, error: labsError } = await supabase\r\n      .from('lab')\r\n      .select('id')\r\n      .eq('manager_id', managerId); // Fetch labs where the manager_id matches the logged-in user\r\n\r\n      if (labsError) throw labsError;\r\n\r\n      // Extract lab IDs managed by the user\r\n      const managedLabIds = managedLabs.map((lab: any) => lab.id);\r\n\r\n      // Step 3: Fetch equipment IDs associated with the managed labs\r\n      const { data: managedEquipment, error: equipmentError } = await supabase\r\n        .from('equipment')\r\n        .select('id')\r\n        .in('lab_id', managedLabIds); // Fetch equipment where lab_id is in the managed labs\r\n\r\n      if (equipmentError) throw equipmentError;\r\n\r\n      // Extract equipment IDs\r\n      const managedEquipmentIds = managedEquipment.map((eq: any) => eq.id);\r\n\r\n\r\n\r\n      const { data, error } = await supabase\r\n        .from('equipment')\r\n        .select('*')\r\n        .in('id', managedEquipmentIds) // Fetch equipment where id is in the managed equipment\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n      setEquipment(data);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('equipment_categories')\r\n        .select('*')\r\n        .order('name');\r\n      if (error) throw error;\r\n      return data ? data.map((category: any) => category.name) : [];\r\n    }\r\n    catch (error: any) {\r\n      setError(error.message);\r\n    }\r\n    finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n  const fetchAllUsers = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('id, email, role')\r\n        .order('created_at', { ascending: false });\r\n      if (error) throw error;\r\n      setUsers(data || []);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const sendNotificationToAllUsers = async (\r\n        createdBy: string,\r\n        title: string,\r\n        message: string,\r\n        type: string\r\n      ) => {\r\n        try {\r\n          const { error } = await supabase.from('notifications').insert(\r\n            users.map((user) => ({\r\n              id: crypto.randomUUID(),\r\n              user_id: user.id,\r\n              created_by: createdBy,\r\n              title,\r\n              message,\r\n              type,\r\n              read: false,\r\n              created_at: new Date().toISOString(),\r\n            }))\r\n          );\r\n    \r\n          if (error) {\r\n            throw error;\r\n          }\r\n        } catch (error: any) {\r\n          console.error('Error sending notifications:', error.message);\r\n        }\r\n      };\r\n  \r\n\r\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    try {\r\n      const file = event.target.files?.[0];\r\n      if (!file) return;\r\n\r\n      setUploadingImage(true);\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${uuidv4()}.${fileExt}`;\r\n      const filePath = `${fileName}`;\r\n\r\n      const { error: uploadError } = await supabase.storage\r\n        .from('equipment-images')\r\n        .upload(filePath, file);\r\n\r\n      if (uploadError) throw uploadError;\r\n\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from('equipment-images')\r\n        .getPublicUrl(filePath);\r\n\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        image_url: publicUrl\r\n      }));\r\n    } catch (error: any) {\r\n      setError('Error uploading image: ' + error.message);\r\n    } finally {\r\n      setUploadingImage(false);\r\n    }\r\n  };\r\n\r\n  const handleAddEdit = (equipment?: Equipment) => {\r\n    if (equipment) {\r\n      setFormData({\r\n        name: equipment.name,\r\n        category: equipment.category,\r\n        description: equipment.description || '',\r\n        manufacturer: equipment.manufacturer || '',\r\n        model: equipment.model || '',\r\n        quantity: 1,\r\n        image_url: equipment.image_url || '',\r\n        detailed_specs: equipment.detailed_specs || defaultSpecs,\r\n        status: equipment.status,\r\n        lab_id: equipment.lab_id\r\n      });\r\n      setEditingEquipment(equipment);\r\n    } else {\r\n      setFormData({\r\n        name: '',\r\n        category: '',\r\n        description: '',\r\n        manufacturer: '',\r\n        model: '',\r\n        quantity: 1,\r\n        image_url: '',\r\n        detailed_specs: defaultSpecs,\r\n        status: 'operational',\r\n        lab_id: '',\r\n      });\r\n      setEditingEquipment(null);\r\n    }\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      if (editingEquipment) {\r\n        const { error } = await supabase\r\n          .from('equipment')\r\n          .update(formData)\r\n          .eq('id', editingEquipment.id);\r\n        if (error) throw error;\r\n      } else {\r\n        const { error } = await supabase\r\n          .from('equipment')\r\n          .insert([formData]);\r\n        if (error) throw error;\r\n\r\n        await sendNotificationToAllUsers(\r\n          'System',\r\n          'New Equipment Added',\r\n          `New equipment \"${formData.name}\" has been added.`,\r\n          'Equipment created'\r\n        );\r\n      }\r\n      setDialogOpen(false);\r\n      fetchEquipment();\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSpecChange = (key: string, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      detailed_specs: {\r\n        ...prev.detailed_specs,\r\n        [key]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const filteredEquipment = equipment.filter(item => {\r\n    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      item.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      item.manufacturer?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      item.model?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n    const matchesCategory = !categoryFilter || item.category === categoryFilter;\r\n    const matchesStatus = !statusFilter || item.status === statusFilter;\r\n\r\n    return matchesSearch && matchesCategory && matchesStatus;\r\n  });\r\n\r\n  if (loading) return <CircularProgress />;\r\n  if (error) return <Alert severity=\"error\">{error}</Alert>;\r\n\r\n  async function handleDelete(id: string, name: string) {\r\n    const confirmDelete = window.confirm('Are you sure you want to delete this equipment?');\r\n    if (!confirmDelete) return;\r\n  \r\n    try {\r\n      // Step 1: Fetch the equipment details to check its status\r\n      const { data: equipmentData, error: fetchError } = await supabase\r\n        .from('equipment')\r\n        .select('status')\r\n        .eq('id', id)\r\n        .single();\r\n  \r\n      if (fetchError) throw new Error(`Failed to fetch equipment details: ${fetchError.message}`);\r\n      if (!equipmentData) throw new Error('Equipment not found');\r\n  \r\n      // Step 2: Check if the equipment is in an invalid state for deletion\r\n      const invalidStates = {\r\n        reserved: 'This equipment is currently reserved and cannot be deleted.',\r\n        maintenance: 'This equipment is currently under maintenance and cannot be deleted.',\r\n        out_of_order: 'This equipment is out of order and cannot be deleted until resolved.',\r\n      };\r\n  \r\n      const currentStatus = equipmentData.status as keyof typeof invalidStates;\r\n      if (invalidStates[currentStatus]) {\r\n        throw new Error(invalidStates[currentStatus]);\r\n      }\r\n  \r\n      // Step 3: Check the Reservation table for active reservations ('pending' or 'approved')\r\n      const { data: reservations, error: reservationError } = await supabase\r\n        .from('reservations')\r\n        .select('*')\r\n        .eq('equipment_id', id)\r\n        .in('status', ['pending', 'approved']); // Check for 'pending' or 'approved' reservations\r\n  \r\n      if (reservationError) throw new Error(`Failed to check reservations: ${reservationError.message}`);\r\n      if (reservations && reservations.length > 0) {\r\n        throw new Error('This equipment has active reservations and cannot be deleted.');\r\n      }\r\n  \r\n      // Step 4: Proceed with deletion if the equipment is in an appropriate state\r\n      const { error: deleteError } = await supabase\r\n        .from('equipment')\r\n        .delete()\r\n        .eq('id', id);\r\n  \r\n      if (deleteError) throw new Error(`Failed to delete equipment: ${deleteError.message}`);\r\n\r\n       // Step 5: Send notification to all users about the deletion\r\n      await sendNotificationToAllUsers(\r\n        'System',\r\n        'Equipment Deleted',\r\n        `Equipment: \"${name}\" has been deleted.`,\r\n        'Equipment deleted'\r\n      );\r\n  \r\n      // Success: Refresh the equipment list\r\n      fetchEquipment();\r\n    } catch (error: any) {\r\n      // Handle errors gracefully with a popup message\r\n      let errorMessage = error.message || 'An unexpected error occurred while deleting the equipment.';\r\n      \r\n      // Display specific error messages for known cases\r\n      if (errorMessage.includes('active reservations')) {\r\n        errorMessage = 'This equipment has active reservations and cannot be deleted.';\r\n      }\r\n  \r\n      // Show the error message in a popup\r\n      window.alert(errorMessage);\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography variant=\"h6\">Equipment Management</Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => handleAddEdit()}\r\n        >\r\n          Add Equipment\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Search and Filters */}\r\n      <Grid container spacing={2} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Search Equipment\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Category Filter</InputLabel>\r\n            <Select\r\n              value={categoryFilter}\r\n              label=\"Category Filter\"\r\n              onChange={(e) => setCategoryFilter(e.target.value)}\r\n            >\r\n              <MenuItem value=\"\">All Categories</MenuItem>\r\n              {categories.map((category) => (\r\n                <MenuItem key={category} value={category}>\r\n                  {category}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Status Filter</InputLabel>\r\n            <Select\r\n              value={statusFilter}\r\n              label=\"Status Filter\"\r\n              onChange={(e) => setStatusFilter(e.target.value)}\r\n            >\r\n              <MenuItem value=\"\">All Status</MenuItem>\r\n              <MenuItem value=\"operational\">Operational</MenuItem>\r\n              <MenuItem value=\"maintenance\">Maintenance</MenuItem>\r\n              <MenuItem value=\"out_of_order\">Out of Order</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n\r\n\r\n      {/* Equipment Grid */}\r\n      <Grid container spacing={3}>\r\n        {filteredEquipment.map((item) => (\r\n          <Grid item xs={12} sm={6} md={4} key={item.id}>\r\n            <Card>\r\n              <CardMedia\r\n                component=\"img\"\r\n                height=\"200\"\r\n                image={item.image_url || 'https://picsum.photos/200/300'}\r\n                alt={item.name}\r\n              />\r\n              <CardContent>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                  <Typography variant=\"h6\">{item.name}</Typography>\r\n                  <Box>\r\n                    <Tooltip title=\"Edit\">\r\n                      <IconButton onClick={() => handleAddEdit(item)}>\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Delete\">\r\n                      <IconButton color=\"error\"onClick={() => {\r\n                          handleDelete(item.id, item.name);\r\n                        }}\r\n                        >\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Box>\r\n                </Box>\r\n                <Chip\r\n                  label={item.category}\r\n                  size=\"small\"\r\n                  sx={{ mr: 1, mb: 1 }}\r\n                />\r\n                <Chip\r\n                  label={item.status}\r\n                  color={\r\n                    item.status === 'operational' ? 'success' :\r\n                    item.status === 'maintenance' ? 'warning' : 'error'\r\n                  }\r\n                  size=\"small\"\r\n                  sx={{ mb: 1 }}\r\n                />\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  {item.manufacturer} {item.model}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {item.description}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Quantity: {item.quantity}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Add/Edit Dialog */}\r\n      <Dialog \r\n        open={dialogOpen} \r\n        onClose={() => setDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {editingEquipment ? 'Edit Equipment' : 'Add Equipment'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <form onSubmit={handleSubmit}>\r\n            <Grid container spacing={2} sx={{ mt: 1 }}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  fullWidth\r\n                  required\r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel>Category</InputLabel>\r\n                  <Select\r\n                    value={formData.category}\r\n                    label=\"Category\"\r\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n                  >\r\n                    {categories.map((category) => (\r\n                      <MenuItem key={category} value={category}>\r\n                        {category}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel>Lab</InputLabel>\r\n                  <Select\r\n                  value={formData.lab_id}\r\n                  label=\"Lab\"\r\n                  onChange={(e) => setFormData({ ...formData, lab_id: e.target.value })}\r\n                >\r\n                  {labs.map((lab) => (\r\n                    <MenuItem key={lab.id} value={lab.id}>\r\n                      {lab.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Quantity\"\r\n                  type=\"number\"\r\n                  fullWidth\r\n                  value={formData.quantity}\r\n                  onChange={(e) => setFormData({ ...formData, quantity: parseInt(e.target.value) })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Manufacturer\"\r\n                  fullWidth\r\n                  value={formData.manufacturer}\r\n                  onChange={(e) => setFormData({ ...formData, manufacturer: e.target.value })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Model\"\r\n                  fullWidth\r\n                  value={formData.model}\r\n                  onChange={(e) => setFormData({ ...formData, model: e.target.value })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                  <Button\r\n                    component=\"label\"\r\n                    variant=\"outlined\"\r\n                    startIcon={<CloudUploadIcon />}\r\n                    disabled={uploadingImage}\r\n                  >\r\n                    Upload Image\r\n                    <input\r\n                      type=\"file\"\r\n                      hidden\r\n                      accept=\"image/*\"\r\n                      onChange={handleImageUpload}\r\n                    />\r\n                  </Button>\r\n                  {uploadingImage && <CircularProgress size={24} />}\r\n                  {formData.image_url && (\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Image uploaded successfully\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  label=\"Description\"\r\n                  fullWidth\r\n                  multiline\r\n                  rows={3}\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>Specifications</Typography>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      label=\"Dimensions\"\r\n                      fullWidth\r\n                      value={formData.detailed_specs.dimensions}\r\n                      onChange={(e) => handleSpecChange('dimensions', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      label=\"Weight\"\r\n                      fullWidth\r\n                      value={formData.detailed_specs.weight}\r\n                      onChange={(e) => handleSpecChange('weight', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      label=\"Power Requirements\"\r\n                      fullWidth\r\n                      value={formData.detailed_specs.power_requirements}\r\n                      onChange={(e) => handleSpecChange('power_requirements', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      label=\"Calibration Interval\"\r\n                      fullWidth\r\n                      value={formData.detailed_specs.calibration_interval}\r\n                      onChange={(e) => handleSpecChange('calibration_interval', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      label=\"Safety Requirements\"\r\n                      fullWidth\r\n                      value={formData.detailed_specs.safety_requirements}\r\n                      onChange={(e) => handleSpecChange('safety_requirements', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      label=\"Operating Conditions\"\r\n                      fullWidth\r\n                      value={formData.detailed_specs.operating_conditions}\r\n                      onChange={(e) => handleSpecChange('operating_conditions', e.target.value)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel>Status</InputLabel>\r\n                  <Select\r\n                    value={formData.status}\r\n                    label=\"Status\"\r\n                    onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n                  >\r\n                    <MenuItem value=\"operational\">Operational</MenuItem>\r\n                    <MenuItem value=\"maintenance\">Maintenance</MenuItem>\r\n                    <MenuItem value=\"out_of_order\">Out of Order</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={handleSubmit} color=\"primary\">\r\n            {editingEquipment ? 'Update' : 'Create'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}"],"names":["defaultSpecs","EquipmentManagement","equipment","setEquipment","useState","loading","setLoading","error","setError","dialogOpen","setDialogOpen","editingEquipment","setEditingEquipment","searchQuery","setSearchQuery","categoryFilter","setCategoryFilter","statusFilter","setStatusFilter","uploadingImage","setUploadingImage","categories","setCategories","users","setUsers","formData","setFormData","labs","setLabs","useEffect","fetchLabs","user","supabase","managerId","managedLabs","labsError","managedLabIds","lab","data","fetchEquipment","fetchCategories","fetchAllUsers","managedEquipment","equipmentError","managedEquipmentIds","eq","category","sendNotificationToAllUsers","createdBy","title","message","type","handleImageUpload","event","file","fileExt","filePath","uuidv4","uploadError","publicUrl","prev","handleAddEdit","handleSubmit","handleSpecChange","key","value","filteredEquipment","item","matchesSearch","matchesCategory","matchesStatus","jsx","CircularProgress","Alert","handleDelete","id","name","equipmentData","fetchError","invalidStates","currentStatus","reservations","reservationError","deleteError","errorMessage","Box","jsxs","Typography","Button","Grid","TextField","InputAdornment","SearchIcon","FormControl","InputLabel","Select","MenuItem","Card","CardMedia","CardContent","Tooltip","IconButton","EditIcon","DeleteIcon","Chip","Dialog","DialogTitle","DialogContent","CloudUploadIcon","DialogActions"],"mappings":"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"}