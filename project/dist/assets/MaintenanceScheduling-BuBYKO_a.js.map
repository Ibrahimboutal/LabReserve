{"version":3,"file":"MaintenanceScheduling-BuBYKO_a.js","sources":["../../src/components/labmanager/MaintenanceScheduling.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Tooltip,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  InputAdornment,\r\n  Pagination,\r\n  Tabs,\r\n  Tab,\r\n  Snackbar,\r\n} from '@mui/material';\r\nimport { format, isToday, parseISO, isBefore, isAfter, addDays } from 'date-fns';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport EventIcon from '@mui/icons-material/Event';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { Equipment } from '@/types';\r\nimport { Lab } from '@/types';\r\nimport { lab_maintenance_schedules } from '@/types';\r\n\r\ninterface MaintenanceSchedule {\r\n  id: string;\r\n  equipment_id: string;\r\n  scheduled_date: string;\r\n  type: string;\r\n  description: string;\r\n  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';\r\n  units: number;\r\n  technician_notes?: string;\r\n  completed_at?: string;\r\n  equipment?: Equipment;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`maintenance-tabpanel-${index}`}\r\n      aria-labelledby={`maintenance-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst maintenanceTypes = [\r\n  'Routine Inspection',\r\n  'Calibration',\r\n  'Repair',\r\n  'Preventive Maintenance',\r\n  'Software Update',\r\n  'Hardware Update',\r\n  'Safety Check',\r\n];\r\n\r\nexport default function MaintenanceScheduling() {\r\n  const [users, setUsers] = useState<any[]>([]); // Fetch users for notifications\r\n  const [schedules, setSchedules] = useState<MaintenanceSchedule[]>([]);\r\n  const [equipment, setEquipment] = useState<Equipment[]>([]);\r\n  const [labSchedule, setLabSchedules] = useState<lab_maintenance_schedules[]>([]);\r\n  const [labs, setLab] = useState<Lab[]>([]);\r\n  const [labLoading, setLabLoading] = useState(true);\r\n  const [labError, setLabError] = useState<string | null>(null);\r\n  const [labDialogOpen, setLabDialogOpen] = useState(false);\r\n  const [labEditingSchedule, setLabEditingSchedule] = useState<lab_maintenance_schedules | null>(null);\r\n  const [labDeletingSchedule, setLabDeletingSchedule] = useState<lab_maintenance_schedules | null>(null);\r\n  const [labDeletingDialogOpen, setLabDeleteDialogOpen] = useState(false);\r\n  const [labFormData, setLabFormData] = useState({\r\n    lab_id: '',\r\n    scheduled_date: '',\r\n    type: '',\r\n    description: '',\r\n    status: 'scheduled' as 'scheduled' | 'in_progress' | 'completed' | 'cancelled',\r\n    technician_notes: '',\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [editingSchedule, setEditingSchedule] = useState<MaintenanceSchedule | null>(null);\r\n  const [deletingSchedule, setDeletingSchedule] = useState<MaintenanceSchedule | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [statusLabFilter, setStatusLabFilter] = useState('');\r\n  const [LabFilterName, setLabFilterName] = useState('');\r\n  const [typeFilter, setTypeFilter] = useState('');\r\n  const [dateFilter, setDateFilter] = useState('');\r\n  const [labsearchQuery, setLabSearchQuery] = useState('');\r\n  const [labtypeFilter, setLabTypeFilter] = useState('');\r\n  const [labdateFilter, setLabDateFilter] = useState('');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [showLabFilters, setShowLabFilters] = useState(false);\r\n  const [EquipmenttabValue, setEquipmentTabValue] = useState(0);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [labtabValue, setlabtabValue] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [labPage, setlabPage] =useState(1);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const rowsPerPage = 6;\r\n  const [formData, setFormData] = useState({\r\n    equipment_id: '',\r\n    scheduled_date: '',\r\n    type: '',\r\n    description: '',\r\n    status: 'scheduled' as 'scheduled' | 'in_progress' | 'completed' | 'cancelled',\r\n    units: 0,\r\n    technician_notes: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchLabData();\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n      try {\r\n        const { data, error } = await supabase.from('users').select('*');\r\n        if (error) throw error;\r\n        setUsers(data);\r\n      } catch (error: any) {\r\n        console.error('Error fetching users:', error.message);\r\n      }\r\n    };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n      const managerId = user.id;\r\n      \r\n      // Step 1: Fetch labs managed by the current user\r\n      const { data: managedLabs, error: labsError } = await supabase\r\n        .from('lab')\r\n        .select('id')\r\n        .eq('manager_id', managerId);\r\n  \r\n      if (labsError) throw labsError;\r\n      if (!managedLabs || managedLabs.length === 0) {\r\n        setSchedules([]);\r\n        setEquipment([]);\r\n        return;\r\n      }\r\n  \r\n      const managedLabIds = managedLabs.map((lab: any) => lab.id);\r\n  \r\n      // Step 2: Fetch equipment IDs associated with the managed labs\r\n      const { data: managedEquipment, error: equipmentError } = await supabase\r\n        .from('equipment')\r\n        .select('id')\r\n        .in('lab_id', managedLabIds);\r\n  \r\n      if (equipmentError) throw equipmentError;\r\n      if (!managedEquipment || managedEquipment.length === 0) {\r\n        setSchedules([]);\r\n        setEquipment([]);\r\n        return;\r\n      }\r\n  \r\n      const managedEquipmentIds = managedEquipment.map((eq: any) => eq.id);\r\n  \r\n      // Step 3: Fetch maintenance schedules only for the managed equipment\r\n      const [schedulesResponse, equipmentResponse] = await Promise.all([\r\n        supabase\r\n          .from('maintenance_schedules')\r\n          .select(`\r\n            *,\r\n            equipment (\r\n              id,\r\n              name,\r\n              category,\r\n              manufacturer,\r\n              model,\r\n              quantity,\r\n              status,\r\n              lab_id\r\n            )\r\n          `)\r\n          .in('equipment_id', managedEquipmentIds)\r\n          .order('scheduled_date', { ascending: true }),\r\n        supabase\r\n          .from('equipment')\r\n          .select('*')\r\n          .in('id', managedEquipmentIds)\r\n          .order('name'),\r\n      ]);\r\n  \r\n      if (schedulesResponse.error) throw schedulesResponse.error;\r\n      if (equipmentResponse.error) throw equipmentResponse.error;\r\n  \r\n      // Additional filter to ensure we only show equipment from managed labs\r\n      const filteredSchedules = schedulesResponse.data.filter(schedule => \r\n        managedEquipmentIds.includes(schedule.equipment_id)\r\n      );\r\n  \r\n      setSchedules(filteredSchedules);\r\n      setEquipment(equipmentResponse.data);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const fetchLabData = async () => {\r\n    try {\r\n      setLabLoading(true);\r\n      setLabError(null);\r\n  \r\n      // Get the current authenticated user\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n  \r\n      const managerId = user.id;\r\n  \r\n      // Fetch labs managed by the current user\r\n      const { data: managedLabs, error: labsError } = await supabase\r\n        .from('lab')\r\n        .select('id, name, status', { count: 'exact' })\r\n        .eq('manager_id', managerId);\r\n  \r\n      if (labsError) throw labsError;\r\n      if (!managedLabs || managedLabs.length === 0) {\r\n        setLabSchedules([]);\r\n        setLab([]);\r\n        return;\r\n      }\r\n  \r\n      const managedLabIds = managedLabs.map(lab => lab.id);\r\n  \r\n      // Fetch lab maintenance schedules and lab data in parallel\r\n      const [labSchedulesResponse, labResponse] = await Promise.all([\r\n        supabase\r\n          .from('lab_maintenance_schedules')\r\n          .select(`\r\n            *,\r\n            lab (\r\n              id,\r\n              name,\r\n              location,\r\n              status\r\n            )\r\n          `)\r\n          .in('lab_id', managedLabIds)\r\n          .order('scheduled_date', { ascending: true }),\r\n        supabase\r\n          .from('lab')\r\n          .select('*')\r\n          .in('id', managedLabIds)\r\n          .order('name'),\r\n      ]);\r\n  \r\n      if (labSchedulesResponse.error) throw labSchedulesResponse.error;\r\n      if (labResponse.error) throw labResponse.error;\r\n  \r\n      // Additional filter to ensure we only show schedules for managed labs\r\n      const filteredSchedules = labSchedulesResponse.data?.filter(schedule => \r\n        managedLabIds.includes(schedule.lab_id)\r\n      ) || [];\r\n  \r\n      setLabSchedules(filteredSchedules);\r\n      setLab(labResponse.data);\r\n  \r\n    } catch (error: any) {\r\n      setLabError(error.message || 'Failed to fetch lab maintenance data');\r\n      console.error('Error fetching lab data:', error);\r\n    } finally {\r\n      setLabLoading(false);\r\n    }\r\n  };\r\n  const handleAddEditLab = (labSchedule?: lab_maintenance_schedules) => {\r\n    if (labSchedule) {\r\n      setLabFormData({\r\n        lab_id: labSchedule.lab_id,\r\n        scheduled_date: labSchedule.scheduled_date.split('T')[0],\r\n        type: labSchedule.type,\r\n        description: labSchedule.description,\r\n        status: labSchedule.status,\r\n        technician_notes: labSchedule.technician_notes || '',\r\n      });\r\n      setLabEditingSchedule(labSchedule);\r\n    } else {\r\n      setLabFormData({\r\n        lab_id: '',\r\n        scheduled_date: format(new Date(), \"yyyy-MM-dd'T'HH:mm\"),\r\n        type: '',\r\n        description: '',\r\n        status: 'scheduled',\r\n        technician_notes: '',\r\n      });\r\n      setLabEditingSchedule(null);\r\n    } \r\n    setLabDialogOpen(true);\r\n  \r\n\r\n  };\r\n  const handleDeleteLabClick = (labSchedule: lab_maintenance_schedules) => {\r\n    setLabDeletingSchedule(labSchedule);\r\n    setLabDeleteDialogOpen(true);\r\n\r\n  };\r\n  const handleLabDelete = async () => {\r\n    if (!labDeletingSchedule) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { error } = await supabase\r\n        .from('lab_maintenance_schedules')\r\n        .delete()\r\n        .eq('id', labDeletingSchedule.id);\r\n\r\n      if (error) throw error;\r\n      \r\n      setSnackbarMessage('Lab maintenance schedule deleted successfully');\r\n      setSnackbarOpen(true);\r\n      fetchLabData();\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n      setLabDeleteDialogOpen(false);\r\n    }\r\n  };\r\n\r\n  const sendNotificationToAllUsers = async (\r\n      title: string,\r\n      message: string,\r\n      type: string\r\n    ) => {\r\n      try {\r\n        const { error } = await supabase.from('notifications').insert(\r\n          users.map((user) => ({\r\n            id: crypto.randomUUID(),\r\n            user_id: user.id,\r\n            title,\r\n            message,\r\n            type,\r\n            read: false,\r\n            created_at: new Date().toISOString(),\r\n          }))\r\n        );\r\n  \r\n        if (error) {\r\n          throw error;\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error sending notifications:', error.message);\r\n      }\r\n  };\r\n  const handleLabSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLabLoading(true);\r\n    setLabError(null);\r\n  \r\n    // Validate required fields\r\n    if (!labFormData.lab_id || !labFormData.scheduled_date || !labFormData.type) {\r\n      setLabError('Please fill in all required fields');\r\n      setLabLoading(false);\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      // First, check if the lab exists and get its current status\r\n      const { data: labData, error: labFetchError } = await supabase\r\n        .from('lab')\r\n        .select('status')\r\n        .eq('id', labFormData.lab_id)\r\n        .single();\r\n  \r\n      if (labFetchError) throw labFetchError;\r\n      if (!labData) throw new Error('Lab not found');\r\n  \r\n      // Check lab availability based on the operation type\r\n      if (!labEditingSchedule) {\r\n        if (labData.status === 'occupied') {\r\n          throw new Error('Lab is currently occupied and cannot be scheduled for maintenance');\r\n        }\r\n        if (labData.status === 'maintenance') {\r\n          throw new Error('Lab is already under maintenance');\r\n        }\r\n        if (labData.status !== 'available') {\r\n          throw new Error('Lab is not available for maintenance');\r\n        }\r\n      }\r\n  \r\n      // Perform the appropriate database operation\r\n      let result;\r\n      if (labEditingSchedule) {\r\n        // Update existing schedule\r\n        result = await supabase\r\n          .from('lab_maintenance_schedules')\r\n          .update(labFormData)\r\n          .eq('id', labEditingSchedule.id)\r\n          .single();\r\n  \r\n        // Update lab status based on maintenance status change\r\n        if (labFormData.status === 'in_progress') {\r\n          await supabase\r\n            .from('lab')\r\n            .update({ status: 'maintenance' })\r\n            .eq('id', labFormData.lab_id);\r\n        } else if (['completed', 'cancelled'].includes(labFormData.status)) {\r\n          await supabase\r\n            .from('lab')\r\n            .update({ status: 'available' })\r\n            .eq('id', labFormData.lab_id);\r\n        }\r\n      } else {\r\n        // Insert new schedule\r\n        result = await supabase\r\n          .from('lab_maintenance_schedules')\r\n          .insert([labFormData])\r\n          .single();\r\n  \r\n        // Only set to maintenance if starting immediately\r\n        if (labFormData.status === 'in_progress') {\r\n          await supabase\r\n            .from('lab')\r\n            .update({ status: 'maintenance' })\r\n            .eq('id', labFormData.lab_id);\r\n        }\r\n      }\r\n  \r\n      // Handle Supabase errors\r\n      if (result.error) throw result.error;\r\n\r\n      // Send notification\r\n      const lab = labs.find((l) => l.id === labFormData.lab_id);\r\n      const action = labEditingSchedule ? 'updated' : 'scheduled';\r\n      const title = `Lab Maintenance ${action.charAt(0).toUpperCase() + action.slice(1)}: ${lab?.name}`;\r\n      let message = `Maintenance for lab \"${lab?.name}\" has been ${action}. `;\r\n      message += `Status: ${labFormData.status}. `;\r\n      message += `Type: ${labFormData.type}.`;\r\n\r\n      await sendNotificationToAllUsers(title, message, 'info');\r\n  \r\n      // Success message and UI updates\r\n      setLabDialogOpen(false);\r\n      setSnackbarMessage(\r\n        labEditingSchedule\r\n          ? 'Lab maintenance schedule updated successfully'\r\n          : 'Lab maintenance schedule created successfully'\r\n      );\r\n      setSnackbarOpen(true);\r\n      fetchLabData(); // Refresh lab data after successful operation\r\n  \r\n    } catch (error: any) {\r\n      // Handle errors gracefully\r\n      setLabError(error.message || 'Failed to save lab maintenance schedule');\r\n      console.error('Error:', error);\r\n    } finally {\r\n      // Ensure loading state is reset\r\n      setLabLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddEdit = (schedule?: MaintenanceSchedule) => {\r\n    if (schedule && (schedule.status === 'completed' || schedule.status === 'cancelled')) {\r\n      setError('Cannot edit a completed or cancelled maintenance schedule');\r\n      return;\r\n    }\r\n    if (schedule) {\r\n      setFormData({\r\n        equipment_id: schedule.equipment_id,\r\n        scheduled_date: schedule.scheduled_date.split('T')[0],\r\n        type: schedule.type,\r\n        description: schedule.description,\r\n        status: schedule.status,\r\n        units: schedule.units,\r\n        technician_notes: schedule.technician_notes || '',\r\n      });\r\n      setEditingSchedule(schedule);\r\n    } else {\r\n      setFormData({\r\n        equipment_id: '',\r\n        scheduled_date: format(new Date(), \"yyyy-MM-dd'T'HH:mm\"),\r\n        type: '',\r\n        description: '',\r\n        status: 'scheduled',\r\n        units: 0,\r\n        technician_notes: '',\r\n      });\r\n      setEditingSchedule(null);\r\n    }\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleDeleteClick = (schedule: MaintenanceSchedule) => {\r\n    setDeletingSchedule(schedule);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!deletingSchedule) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { error } = await supabase\r\n        .from('maintenance_schedules')\r\n        .delete()\r\n        .eq('id', deletingSchedule.id);\r\n\r\n      if (error) throw error;\r\n      \r\n      setSnackbarMessage('Maintenance schedule deleted successfully');\r\n      setSnackbarOpen(true);\r\n      fetchData();\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n      setDeleteDialogOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    setError(null);\r\n  \r\n    try {\r\n      const { equipment_id, scheduled_date, units } = formData;\r\n      // Prevent resubmitting the same status\r\n      if (editingSchedule && editingSchedule.status === formData.status) {\r\n        setError('No changes detected in the status');\r\n        return;\r\n      }\r\n      // Validate required fields\r\n      if (!equipment_id || !scheduled_date || !units) {\r\n        setError('Please fill in all required fields');\r\n        return;\r\n      }\r\n      // Validate units\r\n      if (units <= 0) {\r\n        setError('Units must be greater than 0');\r\n        return;\r\n      }\r\n      // Validate scheduled date\r\n      const scheduledDate = new Date(scheduled_date);\r\n      if (isNaN(scheduledDate.getTime())) {\r\n        setError('Invalid scheduled date');\r\n        return;\r\n      }\r\n      if (scheduledDate < new Date()) {\r\n        setError('Scheduled date cannot be in the past');\r\n        return;\r\n      }\r\n  \r\n      // Fetch equipment details\r\n      const { data: equipmentData, error: equipmentFetchError } = await supabase\r\n        .from('equipment')\r\n        .select('quantity, units_under_maintenance')\r\n        .eq('id', equipment_id)\r\n        .single();\r\n  \r\n      if (equipmentFetchError) throw equipmentFetchError;\r\n  \r\n      const { quantity, units_under_maintenance } = equipmentData;\r\n  \r\n      // Parse the scheduled date and time range\r\n      const startTime = new Date(scheduled_date);\r\n      const endTime = new Date(startTime.getTime() + 1 * 60 * 60 * 1000); // Example: 1-hour maintenance window\r\n  \r\n      // Fetch all approved and pending reservations for the selected equipment during the requested time period\r\n      const { data: reservations, error: conflictError } = await supabase\r\n        .from('reservations')\r\n        .select('*')\r\n        .eq('equipment_id', equipment_id)\r\n        .in('status', ['approved', 'pending'])\r\n        .or(`start_time.lte.${endTime.toISOString()},end_time.gte.${startTime.toISOString()}`);\r\n  \r\n      if (conflictError) throw conflictError;\r\n  \r\n      // Calculate the total number of reserved units\r\n      const reservedUnits = reservations.reduce((total, reservation) => total + reservation.quantity, 0);\r\n  \r\n      // Adjust units_under_maintenance to exclude the current schedule's units (if editing)\r\n      let adjustedUnitsUnderMaintenance = units_under_maintenance;\r\n      if (editingSchedule) {\r\n        const previousUnits = editingSchedule.units;\r\n        adjustedUnitsUnderMaintenance -= previousUnits; // Subtract the units already allocated to this schedule\r\n      }\r\n  \r\n      // Calculate the available units\r\n      const availableUnits = quantity - reservedUnits - adjustedUnitsUnderMaintenance;\r\n  \r\n      // Validate unit availability\r\n      if (units > availableUnits) {\r\n        throw new Error(\r\n          `Not enough available units. Requested: ${units}, Available: ${availableUnits}`\r\n        );\r\n      }\r\n  \r\n      // Prepare the maintenance schedule data\r\n      const data = {\r\n        ...formData,\r\n        completed_at: formData.status === 'completed' ? new Date().toISOString() : null,\r\n      };\r\n  \r\n      if (editingSchedule) {\r\n        // Update the maintenance schedule\r\n        const { error: scheduleError } = await supabase\r\n          .from('maintenance_schedules')\r\n          .update(data)\r\n          .eq('id', editingSchedule.id);\r\n  \r\n        if (scheduleError) throw scheduleError;\r\n  \r\n        // Fetch the previous units under maintenance for this schedule\r\n        const previousUnits = editingSchedule.units;\r\n  \r\n        // Calculate the new units_under_maintenance count\r\n        let newUnitsUnderMaintenance = adjustedUnitsUnderMaintenance;\r\n  \r\n        if (formData.status === 'completed') {\r\n          // Decrement the units_under_maintenance count when maintenance is completed\r\n          newUnitsUnderMaintenance -= previousUnits;\r\n        } else if (formData.status === 'cancelled') {\r\n          // Decrement the units_under_maintenance count when maintenance is cancelled\r\n          newUnitsUnderMaintenance -= previousUnits;\r\n        } else if (formData.status === editingSchedule.status) {\r\n          // If the status hasn't changed, only update the units if they have been modified\r\n          newUnitsUnderMaintenance += formData.units - previousUnits;\r\n        } else {\r\n          // Handle status changes (e.g., re-scheduling or transitioning to \"in_progress\")\r\n          if (editingSchedule.status === 'completed' || editingSchedule.status === 'cancelled') {\r\n            // If the previous status was \"completed\" or \"cancelled\", add the units back\r\n            newUnitsUnderMaintenance += previousUnits;\r\n          }\r\n          if (formData.status === 'in_progress' || formData.status === 'scheduled') {\r\n            // If the new status is \"in_progress\" or \"scheduled\", ensure the units remain under maintenance\r\n            newUnitsUnderMaintenance = Math.max(newUnitsUnderMaintenance, formData.units);\r\n          }\r\n        }\r\n  \r\n        // Ensure the count does not go below 0 or above the total quantity\r\n        newUnitsUnderMaintenance = Math.max(0, Math.min(newUnitsUnderMaintenance, quantity));\r\n  \r\n        // Determine the new equipment status\r\n        let newEquipmentStatus = 'operational'; // Default to operational\r\n        if (newUnitsUnderMaintenance === quantity) {\r\n          newEquipmentStatus = 'maintenance'; // All units are under maintenance\r\n        }\r\n  \r\n        // Update the equipment record\r\n        const { error: equipmentError } = await supabase\r\n          .from('equipment')\r\n          .update({ units_under_maintenance: newUnitsUnderMaintenance, status: newEquipmentStatus })\r\n          .eq('id', equipment_id);\r\n  \r\n        if (equipmentError) throw equipmentError;\r\n        // Send notification for updated maintenance schedule\r\n      const equipmentItem = equipment.find((e) => e.id === formData.equipment_id);\r\n      const title = `Maintenance Schedule Updated: ${equipmentItem?.name}`;\r\n      let message = `The maintenance schedule for \"${equipmentItem?.name}\" has been updated to \"${formData.status}\".`;\r\n      if (formData.status === 'in_progress') {\r\n        message += ` \"${equipmentItem?.units_under_maintenance}\" units of this equipment are now under maintenance.`;\r\n      } else if (formData.status === 'completed') {\r\n        message += ` The maintenance has been completed and \"${equipmentItem?.units_under_maintenance}\" units of this equipment are now available for reservations.`;\r\n      } else if (formData.status === 'cancelled') {\r\n        message += ` The maintenance has been cancelled and \"${equipmentItem?.units_under_maintenance}\" units of this equipment are now available for reservations.`;\r\n      }\r\n      await sendNotificationToAllUsers(title, message, 'info');\r\n  \r\n        setSnackbarMessage('Maintenance schedule updated successfully');\r\n      } else {\r\n        // Insert a new maintenance schedule\r\n        const { error: insertError } = await supabase\r\n          .from('maintenance_schedules')\r\n          .insert([data]);\r\n  \r\n        if (insertError) throw insertError;\r\n  \r\n        // Increment the units_under_maintenance count\r\n        let newUnitsUnderMaintenance = units_under_maintenance + formData.units;\r\n  \r\n        // Ensure the count does not exceed the total quantity\r\n        newUnitsUnderMaintenance = Math.min(newUnitsUnderMaintenance, quantity);\r\n  \r\n        // Determine the new equipment status\r\n        let newEquipmentStatus = 'operational'; // Default to operational\r\n        if (newUnitsUnderMaintenance === quantity) {\r\n          newEquipmentStatus = 'maintenance'; // All units are under maintenance\r\n        }\r\n  \r\n        // Update the equipment record\r\n        const { error: equipmentError } = await supabase\r\n          .from('equipment')\r\n          .update({ units_under_maintenance: newUnitsUnderMaintenance, status: newEquipmentStatus })\r\n          .eq('id', equipment_id);\r\n  \r\n        if (equipmentError) throw equipmentError;\r\n\r\n        \r\n\r\n  \r\n        setSnackbarMessage('Maintenance scheduled successfully');\r\n\r\n        // Send notification for new maintenance schedule\r\n      const equipmentItem = equipment.find((e) => e.id === formData.equipment_id);\r\n      const title = `New Maintenance Scheduled: ${equipmentItem?.name}`;\r\n      const message = `A new maintenance schedule has been created for \"${equipmentItem?.name}\" with \"${formData.units}\" units.`;\r\n      await sendNotificationToAllUsers(title, message, 'info');\r\n\r\n        \r\n      }\r\n  \r\n      setDialogOpen(false);\r\n      setSnackbarOpen(true);\r\n      fetchData();\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'scheduled':\r\n        return 'primary';\r\n      case 'in_progress':\r\n        return 'warning';\r\n      case 'completed':\r\n        return 'success';\r\n      case 'cancelled':\r\n        return 'error';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const handleEquipmentTabChange = (_: React.SyntheticEvent, newValue: number) => {\r\n    setEquipmentTabValue(newValue);\r\n  };\r\n  const handleTabChange =(_: React.SyntheticEvent, newValue: number) =>{\r\n    setTabValue(newValue)\r\n  };\r\n  const handleLabTabChange =(_: React.SyntheticEvent, newValue: number) =>{\r\n    setlabtabValue(newValue)\r\n  };\r\n  const handleChangePage = (_: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n  const handleLabChangePage = (_: React.ChangeEvent<unknown>, value: number) => {\r\n    setlabPage(value);\r\n\r\n  };\r\n\r\n  const handleEventClick = (info: any) => {\r\n    const schedule = schedules.find(s => s.id === info.event.id);\r\n    if (schedule) {\r\n      handleAddEdit(schedule);\r\n    }\r\n  };\r\n  const handleLabEventClick =(info: any) => {\r\n    const labschedule = labSchedule.find(s => s.id === info.event.id);\r\n    if (labschedule) {\r\n      handleAddEditLab(labschedule);\r\n      }\r\n  }\r\n\r\n  // Apply filters\r\n  const filteredSchedules = schedules.filter(schedule => {\r\n    // Search filter\r\n    const matchesSearch = \r\n      schedule.equipment?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      schedule.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      schedule.type?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      schedule.units.toString().includes(searchQuery.toLowerCase());\r\n\r\n    \r\n    // Status filter\r\n    const matchesStatus = !statusFilter || schedule.status === statusFilter;\r\n    \r\n    // Type filter\r\n    const matchesType = !typeFilter || schedule.type === typeFilter;\r\n    \r\n    // Date filter\r\n    let matchesDate = true;\r\n    const scheduleDate = parseISO(schedule.scheduled_date);\r\n    const now = new Date();\r\n    \r\n    if (dateFilter === 'today') {\r\n      matchesDate = isToday(scheduleDate);\r\n    } else if (dateFilter === 'upcoming') {\r\n      matchesDate = isAfter(scheduleDate, now);\r\n    } else if (dateFilter === 'past') {\r\n      matchesDate = isBefore(scheduleDate, now);\r\n    } else if (dateFilter === 'thisWeek') {\r\n      const nextWeek = addDays(now, 7);\r\n      matchesDate = isAfter(scheduleDate, now) && isBefore(scheduleDate, nextWeek);\r\n    }\r\n    \r\n    return matchesSearch && matchesStatus && matchesType && matchesDate;\r\n  });\r\n  const labfilteredSchedules = labSchedule.filter(labSchedule => {\r\n    // Search filter\r\n    const matchesSearch = \r\n    labSchedule.lab?.name?.toLowerCase().includes(labsearchQuery.toLowerCase()) ||\r\n    labSchedule.description?.toLowerCase().includes(labsearchQuery.toLowerCase()) ||\r\n    labSchedule.type?.toLowerCase().includes(labsearchQuery.toLowerCase());\r\n\r\n\r\n    // Lab Name filter\r\n    const matchesLabName = !LabFilterName || labSchedule.lab_id === LabFilterName;\r\n\r\n    // Status filter\r\n    const matchesStatus = !statusLabFilter || labSchedule.status === statusLabFilter;\r\n    // Type filter\r\n    const matchesType = !labtypeFilter || labSchedule.type === labtypeFilter;\r\n    // Date filter\r\n    let matchesDate = true;\r\n    const labscheduleDate = parseISO(labSchedule.scheduled_date);\r\n    const now = new Date();\r\n    if (labdateFilter === 'today') {\r\n      matchesDate = isToday(labscheduleDate);\r\n    } else if (labdateFilter === 'upcoming') {\r\n      matchesDate = isAfter(labscheduleDate, now);\r\n    }\r\n    else if (labdateFilter === 'past') {\r\n      matchesDate = isBefore(labscheduleDate, now);\r\n    } else if (labdateFilter === 'thisWeek') {\r\n      const nextWeek = addDays(now, 7);\r\n      matchesDate = isAfter(labscheduleDate, now) && isBefore(labscheduleDate, nextWeek);\r\n    }\r\n    return matchesSearch && matchesLabName && matchesStatus && matchesType && matchesDate;\r\n  });\r\n\r\n  // Pagination\r\n  const pageCount = Math.ceil(filteredSchedules.length / rowsPerPage);\r\n  const labPageCount = Math.ceil(labfilteredSchedules.length / rowsPerPage);\r\n  const paginatedSchedules = filteredSchedules.slice(\r\n    (page - 1) * rowsPerPage,\r\n    page * rowsPerPage\r\n  );\r\n  const labPaginatedSchedules = labfilteredSchedules.slice(\r\n    (labPage - 1) * rowsPerPage,\r\n    labPage * rowsPerPage\r\n  )\r\n\r\n  // Calendar events\r\n  const calendarEvents = schedules.map(schedule => ({\r\n    id: schedule.id,\r\n    title: `${schedule.type}: ${schedule.equipment?.name}`,\r\n    start: schedule.scheduled_date,\r\n    backgroundColor: \r\n      schedule.status === 'completed' ? '#4caf50' :\r\n      schedule.status === 'in_progress' ? '#ff9800' :\r\n      schedule.status === 'cancelled' ? '#f44336' : '#2196f3',\r\n    borderColor: \r\n      schedule.status === 'completed' ? '#2e7d32' :\r\n      schedule.status === 'in_progress' ? '#e65100' :\r\n      schedule.status === 'cancelled' ? '#c62828' : '#1565c0',\r\n    extendedProps: {\r\n      status: schedule.status,\r\n      description: schedule.description,\r\n      equipment: schedule.equipment\r\n    }\r\n  }));\r\n  const calendarLabEvents = labSchedule.map(labSchedule =>({\r\n    id: labSchedule.id,\r\n    title: `${labSchedule.type}: ${labSchedule.lab?.name}`,\r\n    start: labSchedule.scheduled_date,\r\n    backgroundColor: \r\n      labSchedule.status === 'completed' ? '#4caf50' :\r\n      labSchedule.status === 'in_progress' ? '#ff9800' :\r\n      labSchedule.status === 'cancelled' ? '#f44336' : '#2196f3',\r\n    borderColor: \r\n      labSchedule.status === 'completed' ? '#2e7d32' :\r\n      labSchedule.status === 'in_progress' ? '#e65100' :\r\n      labSchedule.status === 'cancelled' ? '#c62828' : '#1565c0',\r\n    extendedProps: {\r\n      status: labSchedule.status,\r\n      description: labSchedule.description,\r\n      equipment: labSchedule.lab\r\n    }\r\n    \r\n    \r\n\r\n  }));\r\n\r\n  if (loading && schedules.length === 0) {\r\n    return <CircularProgress />;\r\n  }\r\n  if(labLoading && labSchedule.length === 0){\r\n\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Box >\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"maintenance view tabs\">\r\n          <Tab label=\"Lab Maintenance Scheduling\"/>\r\n          <Tab label=\"Maintenance Scheduling\" />\r\n        </Tabs>\r\n      </Box>\r\n      \r\n      \r\n        <TabPanel value={tabValue} index={0}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n            <Typography variant=\"h5\" fontWeight=\"bold\">\r\n              Lab Maintenance Scheduling\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<AddIcon />}\r\n              onClick={() => handleAddEditLab()}\r\n            >\r\n              Schedule a Lab Maintenance\r\n            </Button>\r\n          </Box>\r\n          {labError && (\r\n            <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setLabError(null)}>\r\n              {labError}\r\n            </Alert>\r\n          )}\r\n          {/* Lab Search and Filters */}\r\n          <Paper sx={{ p: 2, mb: 3 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <TextField\r\n                placeholder=\"Search lab maintenance schedules...\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={labsearchQuery}\r\n                onChange={(e) => setLabSearchQuery(e.target.value)}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                sx={{ width: 300 }}\r\n              />\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<FilterListIcon />}\r\n                onClick={() => setShowLabFilters(!showLabFilters)}\r\n                size=\"small\"\r\n              >\r\n                {showLabFilters ? 'Hide Lab Filters' : 'Show Lab Filters'}\r\n              </Button>\r\n            </Box>\r\n            {showLabFilters && (\r\n              <Box sx={{ mt: 2 }}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={3}>\r\n                    <FormControl fullWidth size=\"small\">\r\n                      <InputLabel>Lab</InputLabel>\r\n                      <Select\r\n                        value={LabFilterName}\r\n                        label=\"Lab\"\r\n                        onChange={(e) => setLabFilterName(e.target.value )}\r\n                      >\r\n                        <MenuItem value=\"\">All Labs</MenuItem>\r\n                        {labs.map((lab) => (\r\n                          \r\n\r\n                          <MenuItem key={lab.id} value={lab.id}>\r\n                            {lab.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={3}>\r\n                    <FormControl fullWidth size=\"small\">\r\n                      <InputLabel>Status</InputLabel>\r\n                      <Select\r\n                        value={statusLabFilter}\r\n                        label=\"Status\"\r\n                        onChange={(e) => setStatusLabFilter(e.target.value)}\r\n                      >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        <MenuItem value=\"scheduled\">Scheduled</MenuItem>\r\n                        <MenuItem value=\"in_progress\">In Progress</MenuItem>\r\n                        <MenuItem value=\"completed\">Completed</MenuItem>\r\n                        <MenuItem value=\"cancelled\">Cancelled</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={3}>\r\n                    <FormControl fullWidth size=\"small\">\r\n                      <InputLabel>Type</InputLabel>\r\n                      <Select\r\n                        value={labtypeFilter}\r\n                        label=\"Type\"\r\n                        onChange={(e) => setLabTypeFilter(e.target.value)}\r\n                        >\r\n                        <MenuItem value=\"\">All Types</MenuItem>\r\n                        {maintenanceTypes.map((type) => (\r\n                          <MenuItem key={type} value={type}>\r\n                            {type}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={3}>\r\n                    <FormControl fullWidth size=\"small\">\r\n                      <InputLabel>Date</InputLabel>\r\n                      <Select\r\n                        value={labdateFilter}\r\n                        label=\"Date\"\r\n                        onChange={(e) => setLabDateFilter(e.target.value)}\r\n                      >\r\n                        <MenuItem value=\"\">All Dates</MenuItem>\r\n                        <MenuItem value=\"today\">Today</MenuItem>\r\n                        <MenuItem value=\"upcoming\">Upcoming</MenuItem>\r\n                        <MenuItem value=\"thisWeek\">This Week</MenuItem>\r\n                        <MenuItem value=\"past\">Past</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <Button\r\n                    variant=\"text\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    onClick={() => {\r\n                      setSearchQuery('');\r\n                      setLabFilterName('');\r\n                      setStatusLabFilter('');\r\n                      setTypeFilter('');\r\n                      setDateFilter('');\r\n                      setShowLabFilters(false);\r\n                    }}\r\n                  >\r\n                    Clear Lab Filters\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n          {/* View Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n            <Tabs value={labtabValue} onChange={handleLabTabChange} aria-label=\"lab maintenance view tabs\">\r\n              <Tab label=\"Lab Grid View\" />\r\n              <Tab label=\"Lab Table View\" />\r\n              <Tab label=\"Lab Calendar View\" icon={<EventIcon />} iconPosition=\"start\" />\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Grid View */}\r\n          <TabPanel value={labtabValue} index={0}>\r\n            <Grid container spacing={3}>\r\n              {labfilteredSchedules.length > 0 ? (\r\n                labPaginatedSchedules.map((labSchedule) => (\r\n                  <Grid item key={labSchedule.id} xs={12} sm={6} md={4}>\r\n                    <Card sx={{ height: '100%' }}>\r\n                      <CardContent>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\r\n                          <Typography variant=\"h6\" gutterBottom>\r\n                            {labSchedule.lab?.name}\r\n                          </Typography>\r\n                          <Box>\r\n                            <Tooltip title=\"Edit\">\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => handleAddEditLab(labSchedule)}\r\n                                sx={{ mr: 1 }}\r\n                              >\r\n                                <EditIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Delete\">\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                color=\"error\"\r\n                                onClick={() => handleDeleteLabClick(labSchedule)}\r\n                              >\r\n                                <DeleteIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </Box>\r\n                        </Box>\r\n                        <Box sx={{ mb: 2 }}>\r\n                          <Chip\r\n                            label={labSchedule.type}\r\n                            size=\"small\"\r\n                            sx={{ mr: 1, mb: 1 }}\r\n                          />\r\n                          <Chip\r\n                            label={labSchedule.status}\r\n                            color={getStatusColor(labSchedule.status)}\r\n                            size=\"small\"\r\n                            sx={{ mb: 1 }}\r\n                          />\r\n                        </Box>\r\n                        <Box component=\"span\" fontWeight=\"medium\">\r\n                          Scheduled:\r\n                        </Box>{' '}\r\n                        {format(new Date(labSchedule.scheduled_date), 'PPp')}\r\n                        {isToday(new Date(labSchedule.scheduled_date)) && (\r\n                          <Chip\r\n                            label=\"Today\"\r\n                            color=\"error\"\r\n                            size=\"small\"\r\n                            sx={{ ml: 1 }}\r\n                          />\r\n                        )}\r\n                        <Typography variant=\"body2\" paragraph>\r\n                          {labSchedule.description}\r\n                        </Typography>\r\n                        {labSchedule.technician_notes && (\r\n                          <Box sx={{ mt: 1 }}>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\" fontWeight=\"medium\">\r\n                              Notes:\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              {labSchedule.technician_notes}\r\n                            </Typography>\r\n                          </Box>\r\n                        )}\r\n                        <Box sx={{ mt: 2 }}>\r\n                          <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            onClick={() => handleAddEditLab(labSchedule)}\r\n                          >\r\n                            Update Status\r\n                          </Button>\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                ))\r\n              ) : (\r\n                <Grid item xs={12}>\r\n                  <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\">No Lab maintenance schedules found</Typography>\r\n                    <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\r\n                      {searchQuery || statusLabFilter || typeFilter || dateFilter\r\n                        ? 'Try adjusting your search or filter criteria'\r\n                        : 'No Lab maintenance schedules have been created yet'}\r\n                    </Typography>\r\n                    {!searchQuery && !statusLabFilter && !typeFilter && !dateFilter && (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        startIcon={<AddIcon />}\r\n                        onClick={() => handleAddEditLab()}\r\n                        sx={{ mt: 2 }}\r\n                      >\r\n                        Schedule Lab Maintenance\r\n                      </Button>\r\n                    )}\r\n                  </Paper>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n            {/* Pagination */}\r\n            {labPageCount > 1 && (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\r\n                <Pagination\r\n                  count={labPageCount}\r\n                  page={labPage}\r\n                  onChange={handleLabChangePage}\r\n                  color=\"primary\"\r\n                />\r\n              </Box>\r\n            )}\r\n          </TabPanel>\r\n          {/* Table View */}\r\n          <TabPanel value={labtabValue} index={1}>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Lab</TableCell>\r\n                    <TableCell>Type</TableCell>\r\n                    <TableCell>Scheduled Date</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {labfilteredSchedules.length > 0 ? (\r\n                    labPaginatedSchedules.map((labSchedule) => (\r\n                      <TableRow key={labSchedule.id}>\r\n                        <TableCell>\r\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                            {labSchedule.lab?.name}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {labSchedule.lab?.location}\r\n                          </Typography>\r\n                        </TableCell>\r\n                        <TableCell>{labSchedule.type}</TableCell>\r\n                        <TableCell>\r\n                          {format(new Date(labSchedule.scheduled_date), 'PPp')}\r\n                          {isToday(new Date(labSchedule.scheduled_date)) && (\r\n                            <Chip\r\n                              label=\"Today\"\r\n                              color=\"error\"\r\n                              size=\"small\"\r\n                              sx={{ ml: 1 }}\r\n                            />\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Chip\r\n                            label={labSchedule.status}\r\n                            color={getStatusColor(labSchedule.status)}\r\n                            size=\"small\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                              onClick={() => handleAddEditLab(labSchedule)}\r\n                            >\r\n                              Edit\r\n                            </Button>\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                              color=\"error\"\r\n                              onClick={() => handleDeleteLabClick(labSchedule)}\r\n                            >\r\n                              Delete\r\n                            </Button>\r\n                          </Box>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))\r\n                  ) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={5} align=\"center\">\r\n                        <Typography variant=\"subtitle1\" sx={{ py: 2 }}>\r\n                          No Lab maintenance schedules found\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Try adjusting your search or filter criteria\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            {/* Pagination */}\r\n            {labPageCount > 1 && (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\r\n                <Pagination\r\n                  count={labPageCount}\r\n                  page={labPage}\r\n                  onChange={handleLabChangePage}\r\n                  color=\"primary\"\r\n                />\r\n              </Box>\r\n            )}\r\n          </TabPanel>\r\n          {/* Calendar View */}\r\n          <TabPanel value={labtabValue} index={2}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <FullCalendar\r\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                initialView=\"dayGridMonth\"\r\n                headerToolbar={{\r\n                  left: 'prev,next today',\r\n                  center: 'title',\r\n                  right: 'dayGridMonth,timeGridWeek,timeGridDay',\r\n                }}\r\n                events={calendarLabEvents}\r\n                eventClick={handleLabEventClick}\r\n                height=\"auto\"\r\n                aspectRatio={1.5}\r\n              />\r\n            </Paper>\r\n          </TabPanel>\r\n          {/* Add/Edit Dialog */}\r\n          <Dialog\r\n            open={labDialogOpen}\r\n            onClose={() => {\r\n              setLabDialogOpen(false);\r\n              setLabFormData({\r\n                lab_id: '',\r\n                scheduled_date: format(new Date(), \"yyyy-MM-dd'T'HH:mm\"),\r\n                type: '',\r\n                description: '',\r\n                status: 'scheduled',\r\n                technician_notes: '',\r\n              });\r\n              setLabEditingSchedule(null); // Clear editing state\r\n            }}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n          >\r\n            <DialogTitle>\r\n              {labEditingSchedule ? 'Update Lab Maintenance Schedule' : 'Lab Schedule Maintenance'}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              {labError && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {labError}\r\n                </Alert>\r\n              )}\r\n              <form onSubmit={handleLabSubmit}>\r\n                <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                  {/* Lab Selection */}\r\n                  <Grid item xs={12}>\r\n                    <FormControl fullWidth required>\r\n                      <InputLabel>Lab</InputLabel>\r\n                      <Select\r\n                        value={labFormData.lab_id}\r\n                        label=\"Lab\"\r\n                        onChange={(e) => setLabFormData({ ...labFormData, lab_id: e.target.value })}\r\n                      >\r\n                        {labs.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.name} ({item.location}) \r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  {/* Maintenance Type */}\r\n                  <Grid item xs={12}>\r\n                    <FormControl fullWidth required>\r\n                      <InputLabel>Maintenance Type</InputLabel>\r\n                      <Select\r\n                        value={labFormData.type}\r\n                        label=\"Maintenance Type\"\r\n                        onChange={(e) => setLabFormData({ ...labFormData, type: e.target.value })}\r\n                      >\r\n                        {maintenanceTypes.map((type) => (\r\n                          <MenuItem key={type} value={type}>\r\n                            {type}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                \r\n\r\n                  {/* Scheduled Date */}\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      type=\"datetime-local\"\r\n                      label=\"Scheduled Date\"\r\n                      fullWidth\r\n                      required\r\n                      value={labFormData.scheduled_date}\r\n                      onChange={(e) => setLabFormData({ ...labFormData, scheduled_date: e.target.value })}\r\n                      InputLabelProps={{ shrink: true }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* Description */}\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      label=\"Description\"\r\n                      fullWidth\r\n                      multiline\r\n                      rows={3}\r\n                      value={labFormData.description}\r\n                      onChange={(e) => setLabFormData({ ...labFormData, description: e.target.value })}\r\n                      placeholder=\"Describe the maintenance to be performed\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* Additional Fields for Editing */}\r\n                  {labEditingSchedule && (\r\n                    <>\r\n                      {/* Status */}\r\n                      <Grid item xs={12}>\r\n                      <FormControl fullWidth required>\r\n                        <InputLabel>Status</InputLabel>\r\n                        <Select\r\n                          value={labFormData.status}\r\n                          label=\"Status\"\r\n                          onChange={(e) =>\r\n                            setLabFormData({\r\n                              ...labFormData,\r\n                              status: e.target.value as 'scheduled' | 'in_progress' | 'completed' | 'cancelled',\r\n                            })\r\n                          }\r\n                        >\r\n                          {/* Always include the current status */}\r\n                            <MenuItem value={labFormData.status} disabled>\r\n                              {labFormData.status.charAt(0).toUpperCase() + labFormData.status.slice(1).replace('_', ' ')}\r\n                            </MenuItem>\r\n                          {/* Exclude the current status from the list of options */}\r\n                          {['scheduled', 'in_progress', 'completed', 'cancelled']\r\n                            .filter((status) => status !== labFormData.status)\r\n                            .map((status) => (\r\n                              <MenuItem key={status} value={status}>\r\n                                {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}\r\n                              </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                      </Grid>\r\n\r\n                      {/* Technician Notes */}\r\n                      <Grid item xs={12}>\r\n                        <TextField\r\n                          label=\"Technician Notes\"\r\n                          fullWidth\r\n                          multiline\r\n                          rows={3}\r\n                          value={labFormData.technician_notes}\r\n                          onChange={(e) =>\r\n                            setLabFormData({ ...labFormData, technician_notes: e.target.value })\r\n                          }\r\n                          placeholder=\"Add notes about the maintenance performed or issues encountered\"\r\n                        />\r\n                      </Grid>\r\n                    </>\r\n                  )}\r\n                </Grid>\r\n              </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setLabDialogOpen(false)}>Cancel</Button>\r\n              <Button\r\n                onClick={handleLabSubmit}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={labLoading}\r\n              >\r\n                {labLoading ? <CircularProgress size={24} /> : labEditingSchedule ? 'Update' : 'Schedule'}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          {/* Delete Confirmation Dialog */}\r\n          <Dialog\r\n            open={labDeletingDialogOpen}\r\n            onClose={() => setLabDeleteDialogOpen(false)}\r\n          >\r\n            <DialogTitle>Confirm Deletion</DialogTitle>\r\n            <DialogContent>\r\n              <Typography>\r\n                Are you sure you want to delete this lab maintenance schedule for \"{labDeletingSchedule?.lab?.name}\"?\r\n              </Typography>\r\n              {labDeletingSchedule && (\r\n                <Box sx={{ mt: 2 }}>\r\n                  \r\n                  <Typography variant=\"body2\">\r\n                    <strong>Scheduled Date:</strong> {format(new Date(labDeletingSchedule.scheduled_date), 'PPp')}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\">\r\n                    <strong>Status:</strong> {labDeletingSchedule.status}\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setLabDeleteDialogOpen(false)}>Cancel</Button>\r\n              <Button \r\n                onClick={handleLabDelete} \r\n                color=\"error\" \r\n                variant=\"contained\"\r\n                disabled={labLoading}\r\n              >\r\n                {labLoading ? <CircularProgress size={24} /> : 'Delete'}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n        {/* Success Snackbar */}\r\n        <Snackbar\r\n          open={snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={() => setSnackbarOpen(false)}\r\n          message={snackbarMessage}\r\n        />\r\n        </TabPanel>\r\n\r\n\r\n\r\n        <TabPanel value={tabValue} index={1}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n          <Typography variant=\"h5\" fontWeight=\"bold\">\r\n            Maintenance Scheduling\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={() => handleAddEdit()}\r\n            \r\n          >\r\n            Schedule Equipment Maintenance\r\n          </Button>\r\n        </Box>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError(null)}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Search and Filters */}\r\n        <Paper sx={{ p: 2, mb: 3 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <TextField\r\n              placeholder=\"Search maintenance schedules...\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              sx={{ width: 300 }}\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<FilterListIcon />}\r\n              onClick={() => setShowFilters(!showFilters)}\r\n              size=\"small\"\r\n            >\r\n              {showFilters ? 'Hide Filters' : 'Show Filters'}\r\n            </Button>\r\n          </Box>\r\n\r\n          {showFilters && (\r\n            <Box sx={{ mt: 2 }}>\r\n              <Grid container spacing={2}>  \r\n                <Grid item xs={12} sm={4}>\r\n                  <FormControl fullWidth size=\"small\">\r\n                    <InputLabel>Status</InputLabel>\r\n                    <Select\r\n                      value={statusFilter}\r\n                      label=\"Status\"\r\n                      onChange={(e) => setStatusFilter(e.target.value)}\r\n                    >\r\n                      <MenuItem value=\"\">All Statuses</MenuItem>\r\n                      <MenuItem value=\"scheduled\">Scheduled</MenuItem>\r\n                      <MenuItem value=\"in_progress\">In Progress</MenuItem>\r\n                      <MenuItem value=\"completed\">Completed</MenuItem>\r\n                      <MenuItem value=\"cancelled\">Cancelled</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                  <FormControl fullWidth size=\"small\">\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select\r\n                      value={typeFilter}\r\n                      label=\"Type\"\r\n\r\n                      onChange={(e) => setTypeFilter(e.target.value)}\r\n                    >\r\n                      <MenuItem value=\"\">All Types</MenuItem>\r\n                      {maintenanceTypes.map((type) => (\r\n                        <MenuItem key={type} value={type}>\r\n                          {type}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4}>\r\n                  <FormControl fullWidth size=\"small\">\r\n                    <InputLabel>Date</InputLabel>\r\n                    <Select\r\n                      value={dateFilter}\r\n                      label=\"Date\"\r\n                      onChange={(e) => setDateFilter(e.target.value)}\r\n                    >\r\n                      <MenuItem value=\"\">All Dates</MenuItem>\r\n                      <MenuItem value=\"today\">Today</MenuItem>\r\n                      <MenuItem value=\"upcoming\">Upcoming</MenuItem>\r\n                      <MenuItem value=\"thisWeek\">This Week</MenuItem>\r\n                      <MenuItem value=\"past\">Past</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                <Button \r\n                  variant=\"text\" \r\n                  color=\"secondary\" \r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    setSearchQuery('');\r\n                    setStatusFilter('');\r\n                    setTypeFilter('');\r\n                    setDateFilter('');\r\n                  }}\r\n                >\r\n                  Clear Filters\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Paper>\r\n\r\n        {/* View Tabs */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs value={EquipmenttabValue} onChange={handleEquipmentTabChange} aria-label=\"maintenance view tabs\">\r\n            <Tab label=\"Grid View\" />\r\n            <Tab label=\"Table View\" />\r\n            <Tab label=\"Calendar View\" icon={<EventIcon />} iconPosition=\"start\" />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* Grid View */}\r\n        <TabPanel value={EquipmenttabValue} index={0}>\r\n          <Grid container spacing={3}>\r\n            {filteredSchedules.length > 0 ? (\r\n              paginatedSchedules.map((schedule) => (\r\n                <Grid item xs={12} sm={6} md={4} key={schedule.id}>\r\n                  <Card sx={{ height: '100%' }}>\r\n                    <CardContent>\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                          {schedule.equipment?.name}\r\n                        </Typography>\r\n                        <Box>\r\n                          <Tooltip title=\"Edit\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              onClick={() => handleAddEdit(schedule)}\r\n                              sx={{ mr: 1 }}\r\n                            >\r\n                              <EditIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Delete\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              color=\"error\"\r\n                              onClick={() => handleDeleteClick(schedule)}\r\n                            >\r\n                              <DeleteIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box sx={{ mb: 2 }}>\r\n                        <Chip\r\n                          label={schedule.type}\r\n                          size=\"small\"\r\n                          sx={{ mr: 1, mb: 1 }}\r\n                        />\r\n                        <Chip\r\n                          label={schedule.status}\r\n                          color={getStatusColor(schedule.status)}\r\n                          size=\"small\"\r\n                          sx={{ mb: 1 }}\r\n                        />\r\n                      </Box>\r\n                        <Box sx={{ mb: 1 }}>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            <Box component=\"span\" fontWeight=\"medium\">Quantity:</Box> {schedule.units}\r\n                          </Typography>\r\n                        </Box>\r\n\r\n                        <Box component=\"span\" fontWeight=\"medium\">Scheduled:</Box> {format(new Date(schedule.scheduled_date), 'PPp')}\r\n                        {isToday(new Date(schedule.scheduled_date)) && (\r\n                          <Chip \r\n                            label=\"Today\" \r\n                            color=\"error\" \r\n                            size=\"small\" \r\n                            sx={{ ml: 1 }}\r\n                          />\r\n                        )}\r\n                      \r\n                      <Typography variant=\"body2\" paragraph>\r\n                        {schedule.description}\r\n                      </Typography>\r\n                      {schedule.technician_notes && (\r\n                        <Box sx={{ mt: 1 }}>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\" fontWeight=\"medium\">\r\n                            Notes:\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {schedule.technician_notes}\r\n                          </Typography>\r\n                        </Box>\r\n                      )}\r\n                      <Box sx={{ mt: 2 }}>\r\n                        <Button\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          onClick={() => handleAddEdit(schedule)}\r\n                        >\r\n                          Update Status\r\n                        </Button>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              ))\r\n            ) : (\r\n              <Grid item xs={12}>\r\n                <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n                  <Typography variant=\"h6\">No Equipment maintenance schedules found</Typography>\r\n                  <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\r\n                    {searchQuery || statusFilter || typeFilter || dateFilter \r\n                      ? 'Try adjusting your search or filter criteria'\r\n                      : 'No Equipment maintenance schedules have been created yet'}\r\n                  </Typography>\r\n                  {!searchQuery && !statusFilter && !typeFilter && !dateFilter && (\r\n                    <Button \r\n                      variant=\"contained\" \r\n                      startIcon={<AddIcon />} \r\n                      onClick={() => handleAddEdit()}\r\n                      sx={{ mt: 2 }}\r\n                    >\r\n                      Schedule Maintenance\r\n                    </Button>\r\n                  )}\r\n                </Paper>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n\r\n          {/* Pagination */}\r\n          {pageCount > 1 && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\r\n              <Pagination \r\n                count={pageCount} \r\n                page={page} \r\n                onChange={handleChangePage} \r\n                color=\"primary\" \r\n              />\r\n            </Box>\r\n          )}\r\n        </TabPanel>\r\n\r\n        {/* Table View */}\r\n        <TabPanel value={EquipmenttabValue} index={1}>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Equipment</TableCell>\r\n                  <TableCell>Type</TableCell>\r\n                  <TableCell>Scheduled Date</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Units</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {filteredSchedules.length > 0 ? (\r\n                  paginatedSchedules.map((schedule) => (\r\n                    <TableRow key={schedule.id}>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                          {schedule.equipment?.name}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {schedule.equipment?.category}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>{schedule.type}</TableCell>\r\n                      <TableCell>\r\n                        {format(new Date(schedule.scheduled_date), 'PPp')}\r\n                        {isToday(new Date(schedule.scheduled_date)) && (\r\n                          <Chip \r\n                            label=\"Today\" \r\n                            color=\"error\" \r\n                            size=\"small\" \r\n                            sx={{ ml: 1 }}\r\n                          />\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={schedule.status}\r\n                          color={getStatusColor(schedule.status)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{schedule.units}</TableCell>\r\n                      <TableCell>\r\n                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                          <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            onClick={() => handleAddEdit(schedule)}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            color=\"error\"\r\n                            onClick={() => handleDeleteClick(schedule)}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={5} align=\"center\">\r\n                      <Typography variant=\"subtitle1\" sx={{ py: 2 }}>\r\n                        No Equipment maintenance schedules found\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Try adjusting your search or filter criteria\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          {/* Pagination */}\r\n          {pageCount > 1 && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\r\n              <Pagination \r\n                count={pageCount} \r\n                page={page} \r\n                onChange={handleChangePage} \r\n                color=\"primary\" \r\n              />\r\n            </Box>\r\n          )}\r\n        </TabPanel>\r\n\r\n        {/* Calendar View */}\r\n        <TabPanel value={EquipmenttabValue} index={2}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <FullCalendar\r\n              plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n              initialView=\"dayGridMonth\"\r\n              headerToolbar={{\r\n                left: 'prev,next today',\r\n                center: 'title',\r\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n              }}\r\n              events={calendarEvents}\r\n              eventClick={handleEventClick}\r\n              height=\"auto\"\r\n              aspectRatio={1.5}\r\n            />\r\n          </Paper>\r\n        </TabPanel>\r\n          {/* Add/Edit Dialog */}\r\n        <Dialog\r\n          open={dialogOpen}\r\n          onClose={() => {\r\n            setDialogOpen(false);\r\n            setFormData({\r\n              equipment_id: '',\r\n              scheduled_date: format(new Date(), \"yyyy-MM-dd'T'HH:mm\"),\r\n              type: '',\r\n              description: '',\r\n              status: 'scheduled',\r\n              units: 0,\r\n              technician_notes: '',\r\n            });\r\n            setEditingSchedule(null); // Clear editing state\r\n          }}\r\n          maxWidth=\"sm\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            {editingSchedule ? 'Update Maintenance Schedule' : 'Schedule Maintenance'}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            {error && (\r\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                {error}\r\n              </Alert>\r\n            )}\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                {/* Equipment Selection */}\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Equipment</InputLabel>\r\n                    <Select\r\n                      value={formData.equipment_id}\r\n                      label=\"Equipment\"\r\n                      onChange={(e) => setFormData({ ...formData, equipment_id: e.target.value })}\r\n                    >\r\n                      {equipment.map((item) => (\r\n                        <MenuItem key={item.id} value={item.id}>\r\n                          {item.name} ({item.category}) ({item.quantity} units)\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                {/* Maintenance Type */}\r\n                <Grid item xs={12}>\r\n                  <FormControl fullWidth required>\r\n                    <InputLabel>Maintenance Type</InputLabel>\r\n                    <Select\r\n                      value={formData.type}\r\n                      label=\"Maintenance Type\"\r\n                      onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n                    >\r\n                      {maintenanceTypes.map((type) => (\r\n                        <MenuItem key={type} value={type}>\r\n                          {type}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                {/* Number of Units */}\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    margin=\"dense\"\r\n                    label=\"How many units need to be maintained?\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    required\r\n                    value={formData.units}\r\n                    onChange={(e) => setFormData({ ...formData, units: Number(e.target.value) })}\r\n                    InputProps={{\r\n                      inputProps: { min: 1 },\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/* Scheduled Date */}\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    type=\"datetime-local\"\r\n                    label=\"Scheduled Date\"\r\n                    fullWidth\r\n                    required\r\n                    value={formData.scheduled_date}\r\n                    onChange={(e) => setFormData({ ...formData, scheduled_date: e.target.value })}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/* Description */}\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Description\"\r\n                    fullWidth\r\n                    multiline\r\n                    rows={3}\r\n                    value={formData.description}\r\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                    placeholder=\"Describe the maintenance to be performed\"\r\n                  />\r\n                </Grid>\r\n\r\n                {/* Additional Fields for Editing */}\r\n                {editingSchedule && (\r\n                  <>\r\n                    {/* Status */}\r\n                    <Grid item xs={12}>\r\n                    <FormControl fullWidth required>\r\n                      <InputLabel>Status</InputLabel>\r\n                      <Select\r\n                        value={formData.status}\r\n                        label=\"Status\"\r\n                        onChange={(e) =>\r\n                          setFormData({\r\n                            ...formData,\r\n                            status: e.target.value as 'scheduled' | 'in_progress' | 'completed' | 'cancelled',\r\n                          })\r\n                        }\r\n                      >\r\n                        {/* Always include the current status */}\r\n                          <MenuItem value={formData.status} disabled>\r\n                            {formData.status.charAt(0).toUpperCase() + formData.status.slice(1).replace('_', ' ')}\r\n                          </MenuItem>\r\n                        {/* Exclude the current status from the list of options */}\r\n                        {['scheduled', 'in_progress', 'completed', 'cancelled']\r\n                          .filter((status) => status !== formData.status)\r\n                          .map((status) => (\r\n                            <MenuItem key={status} value={status}>\r\n                              {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}\r\n                            </MenuItem>\r\n                          ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                    </Grid>\r\n\r\n                    {/* Technician Notes */}\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        label=\"Technician Notes\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={3}\r\n                        value={formData.technician_notes}\r\n                        onChange={(e) =>\r\n                          setFormData({ ...formData, technician_notes: e.target.value })\r\n                        }\r\n                        placeholder=\"Add notes about the maintenance performed or issues encountered\"\r\n                      />\r\n                    </Grid>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </form>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n            <Button\r\n              onClick={handleSubmit}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? <CircularProgress size={24} /> : editingSchedule ? 'Update' : 'Schedule'}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* Delete Confirmation Dialog */}\r\n        <Dialog\r\n          open={deleteDialogOpen}\r\n          onClose={() => setDeleteDialogOpen(false)}\r\n        >\r\n          <DialogTitle>Confirm Deletion</DialogTitle>\r\n          <DialogContent>\r\n            <Typography>\r\n              Are you sure you want to delete this maintenance schedule for \"{deletingSchedule?.equipment?.name}\"?\r\n            </Typography>\r\n            {deletingSchedule && (\r\n              <Box sx={{ mt: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Type:</strong> {deletingSchedule.type}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Scheduled Date:</strong> {format(new Date(deletingSchedule.scheduled_date), 'PPp')}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Status:</strong> {deletingSchedule.status}\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n            <Button \r\n              onClick={handleDelete} \r\n              color=\"error\" \r\n              variant=\"contained\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? <CircularProgress size={24} /> : 'Delete'}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* Success Snackbar */}\r\n        <Snackbar\r\n          open={snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={() => setSnackbarOpen(false)}\r\n          message={snackbarMessage}\r\n        />\r\n        </TabPanel>\r\n\r\n      </Box>\r\n    </Box>\r\n  );\r\n}"],"names":["TabPanel","props","children","value","index","other","jsx","Box","maintenanceTypes","MaintenanceScheduling","users","setUsers","useState","schedules","setSchedules","equipment","setEquipment","labSchedule","setLabSchedules","labs","setLab","labLoading","setLabLoading","labError","setLabError","labDialogOpen","setLabDialogOpen","labEditingSchedule","setLabEditingSchedule","labDeletingSchedule","setLabDeletingSchedule","labDeletingDialogOpen","setLabDeleteDialogOpen","labFormData","setLabFormData","loading","setLoading","error","setError","dialogOpen","setDialogOpen","deleteDialogOpen","setDeleteDialogOpen","editingSchedule","setEditingSchedule","deletingSchedule","setDeletingSchedule","searchQuery","setSearchQuery","statusFilter","setStatusFilter","statusLabFilter","setStatusLabFilter","LabFilterName","setLabFilterName","typeFilter","setTypeFilter","dateFilter","setDateFilter","labsearchQuery","setLabSearchQuery","labtypeFilter","setLabTypeFilter","labdateFilter","setLabDateFilter","showFilters","setShowFilters","showLabFilters","setShowLabFilters","EquipmenttabValue","setEquipmentTabValue","tabValue","setTabValue","labtabValue","setlabtabValue","page","setPage","labPage","setlabPage","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","rowsPerPage","formData","setFormData","useEffect","fetchData","fetchLabData","fetchUsers","data","supabase","user","managerId","managedLabs","labsError","managedLabIds","lab","managedEquipment","equipmentError","managedEquipmentIds","eq","schedulesResponse","equipmentResponse","filteredSchedules","schedule","labSchedulesResponse","labResponse","handleAddEditLab","format","handleDeleteLabClick","handleLabDelete","sendNotificationToAllUsers","title","message","type","handleLabSubmit","event","labData","labFetchError","result","l","action","handleAddEdit","handleDeleteClick","handleDelete","handleSubmit","equipment_id","scheduled_date","units","scheduledDate","equipmentData","equipmentFetchError","quantity","units_under_maintenance","startTime","endTime","reservations","conflictError","reservedUnits","total","reservation","adjustedUnitsUnderMaintenance","previousUnits","availableUnits","scheduleError","newUnitsUnderMaintenance","newEquipmentStatus","equipmentItem","e","insertError","getStatusColor","status","handleEquipmentTabChange","_","newValue","handleTabChange","handleLabTabChange","handleChangePage","handleLabChangePage","handleEventClick","info","s","handleLabEventClick","labschedule","matchesSearch","matchesStatus","matchesType","matchesDate","scheduleDate","parseISO","now","isToday","isAfter","isBefore","nextWeek","addDays","labfilteredSchedules","matchesLabName","labscheduleDate","pageCount","labPageCount","paginatedSchedules","labPaginatedSchedules","calendarEvents","calendarLabEvents","CircularProgress","jsxs","Tabs","Tab","Typography","Button","AddIcon","Alert","Paper","TextField","InputAdornment","SearchIcon","FilterListIcon","Grid","FormControl","InputLabel","Select","MenuItem","EventIcon","Card","CardContent","Tooltip","IconButton","EditIcon","DeleteIcon","Chip","Pagination","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Dialog","DialogTitle","DialogContent","item","Fragment","DialogActions","Snackbar"],"mappings":"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"}