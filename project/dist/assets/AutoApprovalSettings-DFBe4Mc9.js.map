{"version":3,"file":"AutoApprovalSettings-DFBe4Mc9.js","sources":["../../src/components/labmanager/AutoApprovalSettings.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Switch,\r\n \r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  CircularProgress,\r\n  Alert,\r\n  Snackbar,\r\n  Chip,\r\n\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n \r\n  DialogActions,\r\n  Button,\r\n  TableFooter,\r\n  TablePagination,\r\n \r\n} from '@mui/material';\r\nimport { format } from 'date-fns';\r\nimport HistoryIcon from '@mui/icons-material/History';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport { AutoApprovalSetting, AutoApprovalLog } from '@/types';\r\n\r\nexport default function AutoApprovalSettings() {\r\n  const { user } = useAuth();\r\n  const [settings, setSettings] = useState<AutoApprovalSetting[]>([]);\r\n  const [logs, setLogs] = useState<AutoApprovalLog[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [logsDialogOpen, setLogsDialogOpen] = useState(false);\r\n  const [equipment, setEquipment] = useState<any[]>([]);\r\n  const [labs, setLabs] = useState<any[]>([]);\r\n  const [users, setUsers] = useState<any[]>([]);\r\n  const [labPage, setLabPage] = useState(0);\r\n  const [labRowsPerPage, setLabRowsPerPage] = useState(5); // Default rows per page for Labs\r\n  const [equipmentPage, setEquipmentPage] = useState(0);\r\n  const [equipmentRowsPerPage, setEquipmentRowsPerPage] = useState(5);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    subscribeToChanges();\r\n  }, []);\r\n\r\n  \r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('User not authenticated');\r\n      const managerId = user.id;\r\n  \r\n      // Step 1: Fetch labs managed by the current user\r\n      const { data: managedLabs, error: labsError } = await supabase\r\n        .from('lab')\r\n        .select('id')\r\n        .eq('manager_id', managerId);\r\n      if (labsError) throw labsError;\r\n      const managedLabIds = managedLabs.map((lab: any) => lab.id);\r\n  \r\n      // Step 2: Fetch equipment IDs associated with the managed labs\r\n      const { data: managedEquipment, error: equipmentError } = await supabase\r\n        .from('equipment')\r\n        .select('id')\r\n        .in('lab_id', managedLabIds)\r\n        .eq('status', 'operational');\r\n      if (equipmentError) throw equipmentError;\r\n      const managedEquipmentIds = managedEquipment.map((eq: any) => eq.id);\r\n  \r\n      // Step 3: Fetch all required data in parallel\r\n      const [settingsData, logsData, equipmentData, labsData, usersData] = await Promise.all([\r\n        supabase\r\n          .from('auto_approval_settings')\r\n          .select('*')\r\n          .order('created_at', { ascending: false }),\r\n        supabase\r\n          .from('auto_approval_logs')\r\n          .select('*')\r\n          .order('created_at', { ascending: false }),\r\n        supabase\r\n          .from('equipment')\r\n          .select('id, name, lab_id')\r\n          .in('id', managedEquipmentIds),\r\n        supabase\r\n          .from('lab')\r\n          .select('id, name')\r\n          .eq('manager_id', managerId),\r\n        supabase\r\n          .from('users')\r\n          .select('id, email, role'),\r\n      ]);\r\n  \r\n      if (settingsData.error) throw settingsData.error;\r\n      if (logsData.error) throw logsData.error;\r\n      if (equipmentData.error) throw equipmentData.error;\r\n      if (labsData.error) throw labsData.error;\r\n      if (usersData.error) throw usersData.error;\r\n  \r\n      // Step 4: Enrich logs data\r\n      const enrichedLogs = logsData.data.map((log) => {\r\n        // Resolve setting_id\r\n        const setting = settingsData.data.find((s) => s.id === log.setting_id);\r\n        let targetName = 'Unknown Target';\r\n        if (setting) {\r\n          if (setting.target_type === 'system') {\r\n            targetName = 'System';\r\n          } else if (setting.target_type === 'lab') {\r\n            const lab = labsData.data.find((l) => l.id === setting.target_id);\r\n            targetName = lab ? lab.name : 'Unknown Lab';\r\n          } else if (setting.target_type === 'equipment') {\r\n            const equipment = equipmentData.data.find((e) => e.id === setting.target_id);\r\n            targetName = equipment ? equipment.name : 'Unknown Equipment';\r\n          }\r\n        }\r\n  \r\n        // Resolve performed_by\r\n        const user = usersData.data.find((u) => u.id === log.performed_by);\r\n        const performedByEmail = user ? user.email : 'Unknown User';\r\n        const performedByRole = user ? user.role : 'Unknown User';\r\n  \r\n        return {\r\n          ...log,\r\n          target_name: targetName,\r\n          performed_by_email: performedByEmail,\r\n          performed_by_role: performedByRole,\r\n        };\r\n      });\r\n  \r\n      // Update state with fetched and enriched data\r\n      setSettings(settingsData.data);\r\n      setLogs(enrichedLogs);\r\n      setEquipment(equipmentData.data);\r\n      setLabs(labsData.data);\r\n      setUsers(usersData.data);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const validateAutoApprovalSetting = (data: any): AutoApprovalSetting => {\r\n    const requiredFields = [\r\n      'id',\r\n      'target_type',\r\n      'enabled',\r\n      'created_by',\r\n      'last_modified_by',\r\n      'created_at',\r\n      'updated_at',\r\n    ];\r\n  \r\n    for (const field of requiredFields) {\r\n      if (!(field in data)) {\r\n        throw new Error(`Missing required field '${field}' in AutoApprovalSetting`);\r\n      }\r\n    }\r\n  \r\n    return data as AutoApprovalSetting;\r\n  };\r\n\r\n  const subscribeToChanges = () => {\r\n    // Helper to avoid duplicates by ID\r\n    const upsertById = <T extends { id: string }>(array: T[], newItem: T): T[] => {\r\n      return array.some((item) => item.id === newItem.id)\r\n        ? array.map((item) => (item.id === newItem.id ? newItem : item))\r\n        : [newItem, ...array];\r\n    };\r\n  \r\n    // Subscribe to changes in the 'auto_approval_settings' table\r\n    const settingsSubscription = supabase\r\n      .channel('auto-approval-settings-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'auto_approval_settings',\r\n        },\r\n        (payload) => {\r\n          setSettings((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              try {\r\n                const validatedSetting = validateAutoApprovalSetting(payload.new);\r\n                return upsertById(prev, validatedSetting);\r\n              } catch (error) {\r\n                console.error('Invalid payload:', error);\r\n                return prev;\r\n              }\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              try {\r\n                const validatedSetting = validateAutoApprovalSetting(payload.new);\r\n                return prev.map((s) => (s.id === payload.old.id ? validatedSetting : s));\r\n              } catch (error) {\r\n                console.error('Invalid payload:', error);\r\n                return prev;\r\n              }\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((s) => s.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in the 'auto_approval_logs' table\r\n    const logsSubscription = supabase\r\n      .channel('auto-approval-logs-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'INSERT',\r\n          schema: 'public',\r\n          table: 'auto_approval_logs',\r\n        },\r\n        async (payload) => {\r\n          console.log('New log entry received:', payload);\r\n          try {\r\n            const newLog = payload.new as AutoApprovalLog;\r\n  \r\n            // Resolve setting_id\r\n            let setting = settings.find((s) => s.id === newLog.setting_id);\r\n            if (!setting) {\r\n              console.warn('Setting not found locally, fetching from database...');\r\n              const { data: fetchedSetting, error: settingError } = await supabase\r\n                .from('auto_approval_settings')\r\n                .select('*')\r\n                .eq('id', newLog.setting_id)\r\n                .single();\r\n              if (settingError) {\r\n                console.error('Error fetching setting:', settingError);\r\n                return;\r\n              }\r\n              setting = fetchedSetting;\r\n              setSettings((prev) => upsertById(prev, fetchedSetting));\r\n            }\r\n  \r\n            let targetName = 'Unknown Target';\r\n            if (setting) {\r\n              if (setting.target_type === 'system') {\r\n                targetName = 'System';\r\n              } else if (setting.target_type === 'lab') {\r\n                let lab = labs.find((l) => l.id === setting!.target_id);\r\n                if (!lab) {\r\n                  console.warn('Lab not found locally, fetching from database...');\r\n                  const { data: fetchedLab, error: labError } = await supabase\r\n                    .from('lab')\r\n                    .select('*')\r\n                    .eq('id', setting!.target_id)\r\n                    .single();\r\n                  if (labError) {\r\n                    console.error('Error fetching lab:', labError);\r\n                  } else {\r\n                    lab = fetchedLab;\r\n                    setLabs((prev) => upsertById(prev, fetchedLab));\r\n                  }\r\n                }\r\n                targetName = lab ? lab.name : 'Unknown Lab';\r\n              } else if (setting.target_type === 'equipment') {\r\n                let equipmentItem = equipment.find((e) => e.id === setting!.target_id);\r\n                if (!equipmentItem) {\r\n                  console.warn('Equipment not found locally, fetching from database...');\r\n                  const { data: fetchedEquipment, error: equipmentError } = await supabase\r\n                    .from('equipment')\r\n                    .select('*')\r\n                    .eq('id', setting!.target_id)\r\n                    .single();\r\n                  if (equipmentError) {\r\n                    console.error('Error fetching equipment:', equipmentError);\r\n                  } else {\r\n                    equipmentItem = fetchedEquipment;\r\n                    setEquipment((prev) => upsertById(prev, fetchedEquipment));\r\n                  }\r\n                }\r\n                targetName = equipmentItem ? equipmentItem.name : 'Unknown Equipment';\r\n              }\r\n            }\r\n  \r\n            // Resolve performed_by\r\n            let performedByUser = users.find((u) => u.id === newLog.performed_by);\r\n            if (!performedByUser) {\r\n              console.warn('User not found locally, fetching from database...');\r\n              const { data: fetchedUser, error: userError } = await supabase\r\n                .from('users')\r\n                .select('*')\r\n                .eq('id', newLog.performed_by)\r\n                .single();\r\n              if (userError) {\r\n                console.error('Error fetching user:', userError);\r\n              } else {\r\n                performedByUser = fetchedUser;\r\n                setUsers((prev) => upsertById(prev, fetchedUser));\r\n              }\r\n            }\r\n  \r\n            const performedByEmail = performedByUser ? performedByUser.email : 'Unknown User';\r\n            const performedByRole = performedByUser ? performedByUser.role : 'Unknown Role';\r\n  \r\n            const enrichedLog = {\r\n              ...newLog,\r\n              target_name: targetName,\r\n              performed_by_email: performedByEmail,\r\n              performed_by_role: performedByRole,\r\n            };\r\n  \r\n            console.log('Enriched log:', enrichedLog);\r\n  \r\n            // Update the logs state with the new enriched log\r\n            setLogs((prev) => [enrichedLog, ...prev]);\r\n          } catch (error) {\r\n            console.error('Error enriching log:', error);\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in the 'users' table\r\n    const usersSubscription = supabase\r\n      .channel('users-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'users',\r\n        },\r\n        (payload) => {\r\n          setUsers((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              return upsertById(prev, payload.new);\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              return prev.map((u) => (u.id === payload.old.id ? payload.new : u));\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((u) => u.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in the 'lab' table\r\n    const labsSubscription = supabase\r\n      .channel('labs-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'lab',\r\n        },\r\n        (payload) => {\r\n          setLabs((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              return upsertById(prev, payload.new);\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              return prev.map((l) => (l.id === payload.old.id ? payload.new : l));\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((l) => l.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Subscribe to changes in the 'equipment' table\r\n    const equipmentSubscription = supabase\r\n      .channel('equipment-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'equipment',\r\n        },\r\n        (payload) => {\r\n          setEquipment((prev) => {\r\n            if (payload.eventType === 'INSERT') {\r\n              return upsertById(prev, payload.new);\r\n            } else if (payload.eventType === 'UPDATE') {\r\n              return prev.map((e) => (e.id === payload.old.id ? payload.new : e));\r\n            } else if (payload.eventType === 'DELETE') {\r\n              return prev.filter((e) => e.id !== payload.old.id);\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      )\r\n      .subscribe();\r\n  \r\n    // Cleanup subscriptions on component unmount\r\n    return () => {\r\n      settingsSubscription.unsubscribe();\r\n      logsSubscription.unsubscribe();\r\n      usersSubscription.unsubscribe();\r\n      labsSubscription.unsubscribe();\r\n      equipmentSubscription.unsubscribe();\r\n    };\r\n  };\r\n\r\n  const sendNotificationToAllUsers = async (\r\n      createdBy: string,\r\n      title: string,\r\n      message: string,\r\n      type: string\r\n    ) => {\r\n      try {\r\n        const { error } = await supabase.from('notifications').insert(\r\n          users.map((user) => ({\r\n            id: crypto.randomUUID(),\r\n            user_id: user.id,\r\n            created_by: createdBy,\r\n            title,\r\n            message,\r\n            type,\r\n            read: false,\r\n            created_at: new Date().toISOString(),\r\n          }))\r\n        );\r\n  \r\n        if (error) {\r\n          throw error;\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error sending notifications:', error.message);\r\n      }\r\n    };\r\n\r\n  const handleToggle = async (\r\n    targetType: 'lab' | 'equipment',\r\n    targetId: string | null,\r\n    currentEnabled: boolean\r\n  ) => {\r\n    if (!user) {\r\n      console.error('User is not authenticated');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const existingSetting = settings.find(\r\n        (s) => s.target_type === targetType && s.target_id === targetId\r\n      );\r\n  \r\n      let settingId = existingSetting?.id;\r\n  \r\n      // Optimistically update UI\r\n      setSettings((prev) => {\r\n        const existing = prev.find(\r\n          (s) => s.target_type === targetType && s.target_id === targetId\r\n        );\r\n      \r\n        if (existing) {\r\n          return prev.map((s) =>\r\n            s.target_type === targetType && s.target_id === targetId\r\n              ? {\r\n                  ...s,\r\n                  enabled: !currentEnabled,\r\n                  updated_at: new Date().toISOString(),\r\n                }\r\n              : s\r\n          );\r\n        } else {\r\n          const newSetting: AutoApprovalSetting = {\r\n            id: crypto.randomUUID(),\r\n            target_type: targetType,\r\n            target_id: targetId || '',\r\n            enabled: !currentEnabled,\r\n            created_by: user.id,\r\n            last_modified_by: user.id,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          };\r\n          return [newSetting, ...prev];\r\n        }\r\n      });\r\n  \r\n      // Perform actual DB operation\r\n      if (existingSetting) {\r\n        const { error: updateError } = await supabase\r\n          .from('auto_approval_settings')\r\n          .update({\r\n            enabled: !currentEnabled,\r\n            last_modified_by: user.id,\r\n            updated_at: new Date().toISOString(),\r\n          })\r\n          .eq('id', existingSetting.id);\r\n  \r\n        if (updateError) throw updateError;\r\n      } else {\r\n        const { data, error: insertError } = await supabase\r\n          .from('auto_approval_settings')\r\n          .insert([{\r\n            target_type: targetType,\r\n            target_id: targetId || '',\r\n            enabled: !currentEnabled,\r\n            created_by: user.id,\r\n            last_modified_by: user.id,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          }])\r\n          .select();\r\n  \r\n        if (insertError) throw insertError;\r\n        settingId = data?.[0]?.id;\r\n      }\r\n  \r\n      // Insert log entry\r\n      if (settingId) {\r\n        const { error: logError } = await supabase\r\n          .from('auto_approval_logs')\r\n          .insert([{\r\n            setting_id: settingId,\r\n            action: !currentEnabled ? 'enabled' : 'disabled',\r\n            performed_by: user.id,\r\n          }]);\r\n  \r\n        if (logError) throw logError;\r\n      }\r\n    let title = '';\r\n    let message = '';\r\n    const createdBy = 'System';\r\n    if (targetType === 'lab') {\r\n      const lab = labs.find((l) => l.id === targetId);\r\n      title = !currentEnabled\r\n        ? `Auto-Approval Activated for Lab: ${lab?.name || 'Unknown Lab'}`\r\n        : `Auto-Approval Deactivated for Lab: ${lab?.name || 'Unknown Lab'}`;\r\n      message = !currentEnabled\r\n        ? `All equipment in this lab is now auto-approved for reservations.`\r\n        : `Auto-approval for equipment in this lab has been disabled.`;\r\n    } else if (targetType === 'equipment') {\r\n      const equipmentItem = equipment.find((e) => e.id === targetId);\r\n      title = !currentEnabled\r\n        ? `Auto-Approval Activated for Equipment: ${equipmentItem?.name || 'Unknown Equipment'}`\r\n        : `Auto-Approval Deactivated for Equipment: ${equipmentItem?.name || 'Unknown Equipment'}`;\r\n      message = !currentEnabled\r\n        ? `This equipment is now auto-approved for reservations.`\r\n        : `Auto-approval for this equipment has been disabled.`;\r\n    }\r\n\r\n    await sendNotificationToAllUsers(createdBy, title, message, 'info');\r\n  \r\n      // Success feedback\r\n      setSnackbarMessage(`Auto-approval ${!currentEnabled ? 'enabled' : 'disabled'} successfully`);\r\n      setSnackbarOpen(true);\r\n    } catch (error: any) {\r\n      console.error('Error toggling auto-approval:', error.message);\r\n      setError(error.message);\r\n      // Optional: rollback state or re-fetch\r\n      fetchData();\r\n    }\r\n  };\r\n  \r\n  const getLatestSetting = (targetType: string, targetId?: string) => {\r\n    const relevantSettings = settings\r\n      .filter(\r\n        (s) => \r\n          s.target_type === targetType && \r\n          s.target_id === (targetId || null)\r\n      )\r\n      .sort((a, b) => \r\n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n      );\r\n    return relevantSettings[0]?.enabled || false;\r\n  };\r\n\r\n  const handleChangeLabPage = (_: unknown, newPage: number) => {\r\n    setLabPage(newPage);\r\n  };\r\n\r\n  const handleChangeLabRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setLabRowsPerPage(parseInt(event.target.value, 10));\r\n    setLabPage(0); // Reset to the first page when changing rows per page\r\n  };\r\n\r\n  const handleChangeEquipmentPage = (_: unknown, newPage: number) => {\r\n    setEquipmentPage(newPage);\r\n  };\r\n\r\n  const handleChangeEquipmentRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEquipmentRowsPerPage(parseInt(event.target.value, 10));\r\n    setEquipmentPage(0); // Reset to the first page when changing rows per page\r\n  };\r\n\r\n  const paginatedData = <T extends any[]>(data: T, equipmentPage: number, equipmentRowsPerPage: number): T => {\r\n    return data.slice(equipmentPage * equipmentRowsPerPage, equipmentPage * equipmentRowsPerPage + equipmentRowsPerPage) as T;\r\n  };\r\n  const labpaginatedData = <T extends any[]>(data: T, labPage: number, labRowsPerPage: number): T => {\r\n    return data.slice(labPage * labRowsPerPage, labPage * labRowsPerPage + labRowsPerPage) as T;\r\n  };\r\n\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ m: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Auto-Approval Settings\r\n      </Typography>\r\n\r\n    \r\n      {/* Lab Settings */}\r\n      <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n        Laboratory Settings\r\n      </Typography>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Laboratory</TableCell>\r\n              <TableCell>Auto-Approval Status</TableCell>\r\n              <TableCell>Last Modified</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n          {labpaginatedData.length > 0 && labpaginatedData(labs, labPage, labRowsPerPage).map((lab) => {\r\n              const isEnabled = getLatestSetting('lab', lab.id);\r\n              return (\r\n                <TableRow key={lab.id}>\r\n                  <TableCell>{lab.name}</TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={isEnabled ? 'Enabled' : 'Disabled'}\r\n                      color={isEnabled ? 'success' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {format(new Date(), 'PPp')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Switch\r\n                      checked={isEnabled}\r\n                      onChange={() => handleToggle('lab', lab.id, isEnabled)}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 20, 30]}\r\n              colSpan={4}\r\n              count={labs.length}\r\n              rowsPerPage={labRowsPerPage}\r\n              page={labPage}\r\n              onPageChange={handleChangeLabPage}\r\n              onRowsPerPageChange={handleChangeLabRowsPerPage}\r\n            />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* Equipment Settings */}\r\n      <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n        Equipment Settings\r\n      </Typography>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Equipment</TableCell>\r\n              <TableCell>Laboratory</TableCell>\r\n              <TableCell>Auto-Approval Status</TableCell>\r\n              <TableCell>Last Modified</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n          {paginatedData.length > 0 && paginatedData(equipment, equipmentPage, equipmentRowsPerPage).map((item) => {\r\n\r\n              const isEnabled = getLatestSetting('equipment', item.id);\r\n              const lab = labs.find((l) => l.id === item.lab_id);\r\n              return (\r\n                <TableRow key={item.id}>\r\n                  <TableCell>{item.name}</TableCell>\r\n                  <TableCell>{lab?.name || 'Unknown'}</TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={isEnabled ? 'Enabled' : 'Disabled'}\r\n                      color={isEnabled ? 'success' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {format(new Date(), 'PPp')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Switch\r\n                      checked={isEnabled}\r\n                      onChange={() => handleToggle('equipment', item.id, isEnabled)}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                colSpan={5}\r\n                count={equipment.length}\r\n                rowsPerPage={equipmentRowsPerPage}\r\n                page={equipmentPage}\r\n                onPageChange={handleChangeEquipmentPage}\r\n                onRowsPerPageChange={handleChangeEquipmentRowsPerPage}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* View Logs Button */}\r\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n        <Button\r\n          startIcon={<HistoryIcon />}\r\n          onClick={() => setLogsDialogOpen(true)}\r\n        >\r\n          View Audit Logs\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Logs Dialog */}\r\n      <Dialog\r\n        open={logsDialogOpen}\r\n        onClose={() => setLogsDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Auto-Approval Audit Logs</DialogTitle>\r\n        <DialogContent>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell>Action</TableCell>\r\n                <TableCell>Target</TableCell>\r\n                <TableCell>Performed By</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {logs.map((log) => (\r\n                <TableRow key={log.id}>\r\n                  <TableCell>{format(new Date(log.created_at), 'PPp')}</TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={log.action}\r\n                      color={log.action === 'enabled' ? 'success' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>{log.target_name}</TableCell>\r\n                  <TableCell>{log.performed_by_email}({log.performed_by_role})</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n            \r\n          </Table>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setLogsDialogOpen(false)}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Success Snackbar */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbarOpen(false)}\r\n        message={snackbarMessage}\r\n      />\r\n    </Box>\r\n  );\r\n}"],"names":["AutoApprovalSettings","user","useAuth","settings","setSettings","useState","logs","setLogs","loading","setLoading","error","setError","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","logsDialogOpen","setLogsDialogOpen","equipment","setEquipment","labs","setLabs","users","setUsers","labPage","setLabPage","labRowsPerPage","setLabRowsPerPage","equipmentPage","setEquipmentPage","equipmentRowsPerPage","setEquipmentRowsPerPage","useEffect","fetchData","subscribeToChanges","supabase","managerId","managedLabs","labsError","managedLabIds","lab","managedEquipment","equipmentError","managedEquipmentIds","eq","settingsData","logsData","equipmentData","labsData","usersData","enrichedLogs","log","setting","s","targetName","l","e","u","performedByEmail","performedByRole","validateAutoApprovalSetting","data","requiredFields","field","upsertById","array","newItem","item","settingsSubscription","payload","prev","validatedSetting","logsSubscription","newLog","fetchedSetting","settingError","fetchedLab","labError","equipmentItem","fetchedEquipment","performedByUser","fetchedUser","userError","enrichedLog","usersSubscription","labsSubscription","equipmentSubscription","sendNotificationToAllUsers","createdBy","title","message","type","handleToggle","targetType","targetId","currentEnabled","existingSetting","settingId","updateError","insertError","logError","getLatestSetting","a","b","handleChangeLabPage","_","newPage","handleChangeLabRowsPerPage","event","handleChangeEquipmentPage","handleChangeEquipmentRowsPerPage","paginatedData","labpaginatedData","jsx","Box","CircularProgress","Alert","Typography","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","isEnabled","Chip","format","Switch","TableFooter","TablePagination","Button","HistoryIcon","jsxs","Dialog","DialogTitle","DialogContent","DialogActions","Snackbar"],"mappings":"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"}